
Master uC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ef0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000ef0  00000f84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800096  00800096  00000fba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002c0  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e86  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9b  00000000  00000000  0000416e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000185b  00000000  00000000  00005109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000688  00000000  00000000  00006964  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a86  00000000  00000000  00006fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001640  00000000  00000000  00007a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  000090b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_1>
   8:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__vector_2>
   c:	0c 94 f1 05 	jmp	0xbe2	; 0xbe2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_10>
  2c:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3a       	cpi	r26, 0xA9	; 169
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 00 	call	0x158	; 0x158 <main>
  8a:	0c 94 76 07 	jmp	0xeec	; 0xeec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <receiveISR>:
uint16* ptr1 = NULL;
uint16 tempValue = 0;
uint8 data_arr[3]={0};

void receiveISR(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	uint8 receivedValue;
	
	/*Control Mode*/
	UART_INT_receive(&receivedValue);
  9c:	ce 01       	movw	r24, r28
  9e:	01 96       	adiw	r24, 0x01	; 1
  a0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <UART_INT_receive>
	UART_transmit(receivedValue);
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	0e 94 ce 06 	call	0xd9c	; 0xd9c <UART_transmit>
	switch(receivedValue)
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	8f 36       	cpi	r24, 0x6F	; 111
  ae:	49 f4       	brne	.+18     	; 0xc2 <receiveISR+0x30>
	{
		case 'o':
		LED_ON(LED_PORT,BLUE_LED_PIN);
  b0:	65 e0       	ldi	r22, 0x05	; 5
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	0e 94 77 03 	call	0x6ee	; 0x6ee <LED_ON>
		LED_ON(LED_PORT,YELLOW_LED_PIN);
  b8:	66 e0       	ldi	r22, 0x06	; 6
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 77 03 	call	0x6ee	; 0x6ee <LED_ON>
		break;
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <receiveISR+0x40>
		
		default:
		LED_OFF(LED_PORT,BLUE_LED_PIN);
  c2:	65 e0       	ldi	r22, 0x05	; 5
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LED_OFF>
		LED_OFF(LED_PORT,YELLOW_LED_PIN);
  ca:	66 e0       	ldi	r22, 0x06	; 6
  cc:	83 e0       	ldi	r24, 0x03	; 3
  ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LED_OFF>
		break;		
	}
}
  d2:	0f 90       	pop	r0
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <LM_ON>:
void LM_ON(void)
{
	/*ADC READING*/
	ADC_autotrigger_readChannel(CH_1,ptr1);
  da:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <ptr1>
  de:	70 91 9c 00 	lds	r23, 0x009C	; 0x80009c <ptr1+0x1>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 ed 03 	call	0x7da	; 0x7da <ADC_autotrigger_readChannel>
	tempValue = ((*ptr1 * 5000UL)/1024)/10;
  e8:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <ptr1>
  ec:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <ptr1+0x1>
  f0:	20 81       	ld	r18, Z
  f2:	31 81       	ldd	r19, Z+1	; 0x01
  f4:	a8 e8       	ldi	r26, 0x88	; 136
  f6:	b3 e1       	ldi	r27, 0x13	; 19
  f8:	0e 94 27 07 	call	0xe4e	; 0xe4e <__umulhisi3>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	38 e2       	ldi	r19, 0x28	; 40
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	0e 94 05 07 	call	0xe0a	; 0xe0a <__udivmodsi4>
 108:	30 93 9a 00 	sts	0x009A, r19	; 0x80009a <tempValue+0x1>
 10c:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <tempValue>
	data_arr[2] = tempValue;
 110:	20 93 98 00 	sts	0x0098, r18	; 0x800098 <__data_end+0x2>
	
	if(tempValue > 30)
 114:	2f 31       	cpi	r18, 0x1F	; 31
 116:	31 05       	cpc	r19, r1
 118:	28 f0       	brcs	.+10     	; 0x124 <LM_ON+0x4a>
	{
		/*BUZZER ON*/
		LED_ON(PORTC_ID,PIN6_ID);
 11a:	66 e0       	ldi	r22, 0x06	; 6
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0e 94 77 03 	call	0x6ee	; 0x6ee <LED_ON>
 122:	08 95       	ret
	}
	else
	{
		/*BUZZER OFF*/
		LED_OFF(PORTC_ID,PIN6_ID);
 124:	66 e0       	ldi	r22, 0x06	; 6
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LED_OFF>
 12c:	08 95       	ret

0000012e <DATA_SAVING>:
	}
}

void DATA_SAVING(void)
{
 12e:	cf 93       	push	r28
	for(uint8 i=0; i<3; i++)
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	0e c0       	rjmp	.+28     	; 0x150 <DATA_SAVING+0x22>
	{
		SPI_send(data_arr[i]);
 134:	ec 2f       	mov	r30, r28
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	ea 56       	subi	r30, 0x6A	; 106
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	80 81       	ld	r24, Z
 13e:	0e 94 46 06 	call	0xc8c	; 0xc8c <SPI_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 142:	8f e3       	ldi	r24, 0x3F	; 63
 144:	9c e9       	ldi	r25, 0x9C	; 156
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <DATA_SAVING+0x18>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <DATA_SAVING+0x1e>
 14c:	00 00       	nop
	}
}

void DATA_SAVING(void)
{
	for(uint8 i=0; i<3; i++)
 14e:	cf 5f       	subi	r28, 0xFF	; 255
 150:	c3 30       	cpi	r28, 0x03	; 3
 152:	80 f3       	brcs	.-32     	; 0x134 <DATA_SAVING+0x6>
	{
		SPI_send(data_arr[i]);
		_delay_ms(10);
	}
}
 154:	cf 91       	pop	r28
 156:	08 95       	ret

00000158 <main>:
	uint8 flameSensorValue;
	uint8 gasSensorValue;
	uint8 duty=0;
	
	/*OCR0 PIN*/
	DIO_voidSetPinDirection(PORTB_ID,PIN3_ID,OUTPUT_PIN);
 158:	41 e0       	ldi	r20, 0x01	; 1
 15a:	63 e0       	ldi	r22, 0x03	; 3
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	
	/*GAS SENSOR PIN*/
	DIO_voidSetPinDirection(PORTC_ID,PIN7_ID,INPUT_PIN);
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	67 e0       	ldi	r22, 0x07	; 7
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTC_ID,PIN7_ID,LOGIC_HIGH); /*activate pull up*/
 16c:	41 e0       	ldi	r20, 0x01	; 1
 16e:	67 e0       	ldi	r22, 0x07	; 7
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
	
	/*FLAME SENSOR PIN ON EXT INT0*/
	DIO_voidSetPinDirection(PORTD_ID,PIN2_ID,INPUT_PIN);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	83 e0       	ldi	r24, 0x03	; 3
 17c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTD_ID,PIN2_ID,LOGIC_HIGH); /*activate pull up*/
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	83 e0       	ldi	r24, 0x03	; 3
 186:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
	
	/*LM35 CHANNEL*/
	DIO_voidSetPinDirection(PORTA_ID,PIN1_ID,INPUT_PIN);
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTA_ID,PIN1_ID,LOGIC_HIGH); /*activate pull up*/
 194:	41 e0       	ldi	r20, 0x01	; 1
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
	
	/*BUTTON PIN*/
	DIO_voidSetPinDirection(PORTB_ID,PIN2_ID,INPUT_PIN);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORTB_ID,PIN2_ID,LOGIC_HIGH); /*activate pull up*/
 1a8:	41 e0       	ldi	r20, 0x01	; 1
 1aa:	62 e0       	ldi	r22, 0x02	; 2
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
	
	/*LED INITS*/
	LED_init(LED_PORT,RED_LED_PIN);
 1b2:	67 e0       	ldi	r22, 0x07	; 7
 1b4:	83 e0       	ldi	r24, 0x03	; 3
 1b6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_init>
	LED_init(LED_PORT,GREEN_LED_PIN);
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_init>
	LED_init(LED_PORT,BLUE_LED_PIN);
 1c2:	65 e0       	ldi	r22, 0x05	; 5
 1c4:	83 e0       	ldi	r24, 0x03	; 3
 1c6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_init>
	LED_init(LED_PORT,YELLOW_LED_PIN);
 1ca:	66 e0       	ldi	r22, 0x06	; 6
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_init>
	
	/*BUZZER INIT*/
	LED_init(PORTC_ID,PIN6_ID);
 1d2:	66 e0       	ldi	r22, 0x06	; 6
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LED_init>
	
	
	/*ALL INITS*/
	ADC_autotrigger_init();
 1da:	0e 94 bf 03 	call	0x77e	; 0x77e <ADC_autotrigger_init>
	LCD_init();
 1de:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_init>
	TIMER0_PWM_init();
 1e2:	0e 94 48 06 	call	0xc90	; 0xc90 <TIMER0_PWM_init>
	UART_callback(receiveISR);
 1e6:	89 e4       	ldi	r24, 0x49	; 73
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <UART_callback>
	UART_init(9600);
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	95 e2       	ldi	r25, 0x25	; 37
 1f2:	0e 94 af 06 	call	0xd5e	; 0xd5e <UART_init>
	SPI_init();
 1f6:	0e 94 1c 06 	call	0xc38	; 0xc38 <SPI_init>
	
	/*motor:*/
	DcMotor_init();
 1fa:	0e 94 7f 03 	call	0x6fe	; 0x6fe <DcMotor_init>
	DcMotor_Rotate(STOP,0);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	0e 94 94 03 	call	0x728	; 0x728 <DcMotor_Rotate>
	
	
	/*LCD initial display*/
	LCD_moveCursor(0,0);
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_moveCursor>
	LCD_displayString("FLAME:  ");
 20e:	80 e6       	ldi	r24, 0x60	; 96
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 31 03 	call	0x662	; 0x662 <LCD_displayString>
				
	LCD_moveCursor(1,0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_moveCursor>
	LCD_displayString("GAS:  ");
 21e:	89 e6       	ldi	r24, 0x69	; 105
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 31 03 	call	0x662	; 0x662 <LCD_displayString>
	
	LCD_moveCursor(3,4);
 226:	64 e0       	ldi	r22, 0x04	; 4
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_moveCursor>
	LCD_displayString("TEMP:   C");
 22e:	80 e7       	ldi	r24, 0x70	; 112
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 31 03 	call	0x662	; 0x662 <LCD_displayString>
	
	/*INTERRUPT INIT*/
	EXT_callback(EXT_0,LM_ON);
 236:	6d e6       	ldi	r22, 0x6D	; 109
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <EXT_callback>
	EXT_init(EXT_0,LOW_LEVEL);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 17 05 	call	0xa2e	; 0xa2e <EXT_init>
	
	EXT_callback(EXT_2,DATA_SAVING);
 248:	67 e9       	ldi	r22, 0x97	; 151
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <EXT_callback>
	EXT_init(EXT_2,FALLING);
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	0e 94 17 05 	call	0xa2e	; 0xa2e <EXT_init>
	
	GIE_enable();
 25a:	0e 94 18 06 	call	0xc30	; 0xc30 <GIE_enable>
	
	while(1)
	{	
		/*FLAME SENSOR READING*/
		flameSensorValue = DIO_voidGetPinValue(PORTD_ID,PIN2_ID);
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <DIO_voidGetPinValue>
 266:	d8 2f       	mov	r29, r24
		data_arr[0] = flameSensorValue;
 268:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
		if(flameSensorValue == 0)
 26c:	81 11       	cpse	r24, r1
 26e:	14 c0       	rjmp	.+40     	; 0x298 <main+0x140>
		{	
			LED_ON(PORTC_ID,PIN6_ID);
 270:	66 e0       	ldi	r22, 0x06	; 6
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 77 03 	call	0x6ee	; 0x6ee <LED_ON>
			LED_OFF(LED_PORT,GREEN_LED_PIN);
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LED_OFF>
			LED_ON(LED_PORT,RED_LED_PIN);
 280:	67 e0       	ldi	r22, 0x07	; 7
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	0e 94 77 03 	call	0x6ee	; 0x6ee <LED_ON>
			
			LCD_moveCursor(0,8);
 288:	68 e0       	ldi	r22, 0x08	; 8
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_moveCursor>
			LCD_displayString("DETECTED");
 290:	8a e7       	ldi	r24, 0x7A	; 122
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 31 03 	call	0x662	; 0x662 <LCD_displayString>
		}
		if(flameSensorValue == 1)
 298:	d1 30       	cpi	r29, 0x01	; 1
 29a:	41 f4       	brne	.+16     	; 0x2ac <main+0x154>
		{		
			LCD_moveCursor(0,8);
 29c:	68 e0       	ldi	r22, 0x08	; 8
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_moveCursor>
			LCD_displayString("NO FLAME");
 2a4:	83 e8       	ldi	r24, 0x83	; 131
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 31 03 	call	0x662	; 0x662 <LCD_displayString>
		}
		
		/*GAS SENSOR READING*/
		gasSensorValue = DIO_voidGetPinValue(PORTC_ID,PIN7_ID);
 2ac:	67 e0       	ldi	r22, 0x07	; 7
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <DIO_voidGetPinValue>
 2b4:	18 2f       	mov	r17, r24
		data_arr[1] = gasSensorValue;
 2b6:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <__data_end+0x1>
		if(gasSensorValue == 0)
 2ba:	81 11       	cpse	r24, r1
 2bc:	23 c0       	rjmp	.+70     	; 0x304 <main+0x1ac>
		{
			LCD_moveCursor(1,6);
 2be:	66 e0       	ldi	r22, 0x06	; 6
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_moveCursor>
			LCD_displayString("DETECTED");
 2c6:	8a e7       	ldi	r24, 0x7A	; 122
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 31 03 	call	0x662	; 0x662 <LCD_displayString>
			
			LED_ON(PORTC_ID,PIN6_ID);
 2ce:	66 e0       	ldi	r22, 0x06	; 6
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	0e 94 77 03 	call	0x6ee	; 0x6ee <LED_ON>
			LED_OFF(LED_PORT,GREEN_LED_PIN);
 2d6:	64 e0       	ldi	r22, 0x04	; 4
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LED_OFF>
			LED_ON(LED_PORT,RED_LED_PIN);
 2de:	67 e0       	ldi	r22, 0x07	; 7
 2e0:	83 e0       	ldi	r24, 0x03	; 3
 2e2:	0e 94 77 03 	call	0x6ee	; 0x6ee <LED_ON>
			
			for(duty = 0 ; duty<255; duty+=5)
 2e6:	c0 e0       	ldi	r28, 0x00	; 0
 2e8:	0b c0       	rjmp	.+22     	; 0x300 <main+0x1a8>
			{
				DcMotor_Rotate(CW,duty); /*rotate motor*/
 2ea:	6c 2f       	mov	r22, r28
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 94 03 	call	0x728	; 0x728 <DcMotor_Rotate>
 2f2:	8f e1       	ldi	r24, 0x1F	; 31
 2f4:	9e e4       	ldi	r25, 0x4E	; 78
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x19e>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <main+0x1a4>
 2fc:	00 00       	nop
			
			LED_ON(PORTC_ID,PIN6_ID);
			LED_OFF(LED_PORT,GREEN_LED_PIN);
			LED_ON(LED_PORT,RED_LED_PIN);
			
			for(duty = 0 ; duty<255; duty+=5)
 2fe:	cb 5f       	subi	r28, 0xFB	; 251
 300:	cf 3f       	cpi	r28, 0xFF	; 255
 302:	99 f7       	brne	.-26     	; 0x2ea <main+0x192>
			{
				DcMotor_Rotate(CW,duty); /*rotate motor*/
				_delay_ms(5);
			}
		}
		if(gasSensorValue == 1)
 304:	11 30       	cpi	r17, 0x01	; 1
 306:	61 f4       	brne	.+24     	; 0x320 <main+0x1c8>
		{
			DcMotor_Rotate(STOP,0);
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 94 03 	call	0x728	; 0x728 <DcMotor_Rotate>
			LCD_moveCursor(1,6);
 310:	66 e0       	ldi	r22, 0x06	; 6
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_moveCursor>
			LCD_displayString("NO GAS  ");
 318:	8c e8       	ldi	r24, 0x8C	; 140
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 31 03 	call	0x662	; 0x662 <LCD_displayString>
		}
		LCD_moveCursor(3,10);
 320:	6a e0       	ldi	r22, 0x0A	; 10
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_moveCursor>
		LCD_intgerToString(tempValue);
 328:	80 91 99 00 	lds	r24, 0x0099	; 0x800099 <tempValue>
 32c:	90 91 9a 00 	lds	r25, 0x009A	; 0x80009a <tempValue+0x1>
 330:	0e 94 55 03 	call	0x6aa	; 0x6aa <LCD_intgerToString>
		
		if(flameSensorValue == 1 && gasSensorValue == 1)
 334:	d1 30       	cpi	r29, 0x01	; 1
 336:	09 f0       	breq	.+2      	; 0x33a <main+0x1e2>
 338:	92 cf       	rjmp	.-220    	; 0x25e <main+0x106>
 33a:	11 30       	cpi	r17, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <main+0x1e8>
 33e:	8f cf       	rjmp	.-226    	; 0x25e <main+0x106>
		{
			LED_OFF(PORTC_ID,PIN6_ID);
 340:	66 e0       	ldi	r22, 0x06	; 6
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LED_OFF>
			LED_ON(LED_PORT,GREEN_LED_PIN);
 348:	64 e0       	ldi	r22, 0x04	; 4
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 77 03 	call	0x6ee	; 0x6ee <LED_ON>
			LED_OFF(LED_PORT,RED_LED_PIN);
 350:	67 e0       	ldi	r22, 0x07	; 7
 352:	83 e0       	ldi	r24, 0x03	; 3
 354:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <LED_OFF>
 358:	82 cf       	rjmp	.-252    	; 0x25e <main+0x106>

0000035a <LCD_sendCommand>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 35a:	cf 93       	push	r28
 35c:	c8 2f       	mov	r28, r24
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	63 e0       	ldi	r22, 0x03	; 3
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 368:	8f e9       	ldi	r24, 0x9F	; 159
 36a:	9f e0       	ldi	r25, 0x0F	; 15
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <LCD_sendCommand+0x12>
 370:	00 c0       	rjmp	.+0      	; 0x372 <LCD_sendCommand+0x18>
 372:	00 00       	nop
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	62 e0       	ldi	r22, 0x02	; 2
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_sendCommand+0x28>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_sendCommand+0x2e>
 388:	00 00       	nop
 38a:	4c 2f       	mov	r20, r28
 38c:	40 71       	andi	r20, 0x10	; 16
 38e:	50 e0       	ldi	r21, 0x00	; 0
 390:	55 95       	asr	r21
 392:	47 95       	ror	r20
 394:	55 95       	asr	r21
 396:	47 95       	ror	r20
 398:	55 95       	asr	r21
 39a:	47 95       	ror	r20
 39c:	55 95       	asr	r21
 39e:	47 95       	ror	r20
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 3a8:	4c 2f       	mov	r20, r28
 3aa:	40 72       	andi	r20, 0x20	; 32
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	55 95       	asr	r21
 3b0:	47 95       	ror	r20
 3b2:	55 95       	asr	r21
 3b4:	47 95       	ror	r20
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	55 95       	asr	r21
 3bc:	47 95       	ror	r20
 3be:	55 95       	asr	r21
 3c0:	47 95       	ror	r20
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 3ca:	4c 2f       	mov	r20, r28
 3cc:	40 74       	andi	r20, 0x40	; 64
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	04 2e       	mov	r0, r20
 3d2:	45 2f       	mov	r20, r21
 3d4:	00 0c       	add	r0, r0
 3d6:	44 1f       	adc	r20, r20
 3d8:	55 0b       	sbc	r21, r21
 3da:	00 0c       	add	r0, r0
 3dc:	44 1f       	adc	r20, r20
 3de:	55 1f       	adc	r21, r21
 3e0:	62 e0       	ldi	r22, 0x02	; 2
 3e2:	82 e0       	ldi	r24, 0x02	; 2
 3e4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 3e8:	4c 2f       	mov	r20, r28
 3ea:	44 1f       	adc	r20, r20
 3ec:	44 27       	eor	r20, r20
 3ee:	44 1f       	adc	r20, r20
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 3f8:	8f e9       	ldi	r24, 0x9F	; 159
 3fa:	9f e0       	ldi	r25, 0x0F	; 15
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_sendCommand+0xa2>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	62 e0       	ldi	r22, 0x02	; 2
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 40e:	8f e9       	ldi	r24, 0x9F	; 159
 410:	9f e0       	ldi	r25, 0x0F	; 15
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 424:	8f e9       	ldi	r24, 0x9F	; 159
 426:	9f e0       	ldi	r25, 0x0F	; 15
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
 430:	4c 2f       	mov	r20, r28
 432:	41 70       	andi	r20, 0x01	; 1
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 43c:	4c 2f       	mov	r20, r28
 43e:	42 70       	andi	r20, 0x02	; 2
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	55 95       	asr	r21
 444:	47 95       	ror	r20
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 44e:	4c 2f       	mov	r20, r28
 450:	44 70       	andi	r20, 0x04	; 4
 452:	50 e0       	ldi	r21, 0x00	; 0
 454:	55 95       	asr	r21
 456:	47 95       	ror	r20
 458:	55 95       	asr	r21
 45a:	47 95       	ror	r20
 45c:	62 e0       	ldi	r22, 0x02	; 2
 45e:	82 e0       	ldi	r24, 0x02	; 2
 460:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 464:	c8 70       	andi	r28, 0x08	; 8
 466:	4c 2f       	mov	r20, r28
 468:	50 e0       	ldi	r21, 0x00	; 0
 46a:	55 95       	asr	r21
 46c:	47 95       	ror	r20
 46e:	55 95       	asr	r21
 470:	47 95       	ror	r20
 472:	55 95       	asr	r21
 474:	47 95       	ror	r20
 476:	63 e0       	ldi	r22, 0x03	; 3
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 47e:	8f e9       	ldi	r24, 0x9F	; 159
 480:	9f e0       	ldi	r25, 0x0F	; 15
 482:	01 97       	sbiw	r24, 0x01	; 1
 484:	f1 f7       	brne	.-4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 488:	00 00       	nop
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 494:	8f e9       	ldi	r24, 0x9F	; 159
 496:	9f e0       	ldi	r25, 0x0F	; 15
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49e:	00 00       	nop
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <LCD_init>:
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	63 e0       	ldi	r22, 0x03	; 3
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	62 e0       	ldi	r22, 0x02	; 2
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 4b8:	2f ef       	ldi	r18, 0xFF	; 255
 4ba:	89 ef       	ldi	r24, 0xF9	; 249
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	21 50       	subi	r18, 0x01	; 1
 4c0:	80 40       	sbci	r24, 0x00	; 0
 4c2:	90 40       	sbci	r25, 0x00	; 0
 4c4:	e1 f7       	brne	.-8      	; 0x4be <LCD_init+0x1a>
 4c6:	00 c0       	rjmp	.+0      	; 0x4c8 <LCD_init+0x24>
 4c8:	00 00       	nop
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	60 e0       	ldi	r22, 0x00	; 0
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 4d4:	41 e0       	ldi	r20, 0x01	; 1
 4d6:	61 e0       	ldi	r22, 0x01	; 1
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	62 e0       	ldi	r22, 0x02	; 2
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 4e8:	41 e0       	ldi	r20, 0x01	; 1
 4ea:	63 e0       	ldi	r22, 0x03	; 3
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 4f2:	83 e3       	ldi	r24, 0x33	; 51
 4f4:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_sendCommand>
 4f8:	82 e3       	ldi	r24, 0x32	; 50
 4fa:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_sendCommand>
 4fe:	88 e2       	ldi	r24, 0x28	; 40
 500:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_sendCommand>
 504:	86 e0       	ldi	r24, 0x06	; 6
 506:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_sendCommand>
 50a:	8c e0       	ldi	r24, 0x0C	; 12
 50c:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_sendCommand>
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_sendCommand>
 516:	08 95       	ret

00000518 <LCD_displayCharacter>:
 518:	cf 93       	push	r28
 51a:	c8 2f       	mov	r28, r24
 51c:	41 e0       	ldi	r20, 0x01	; 1
 51e:	63 e0       	ldi	r22, 0x03	; 3
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 526:	8f e9       	ldi	r24, 0x9F	; 159
 528:	9f e0       	ldi	r25, 0x0F	; 15
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_displayCharacter+0x12>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <LCD_displayCharacter+0x18>
 530:	00 00       	nop
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	62 e0       	ldi	r22, 0x02	; 2
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 53c:	8f e9       	ldi	r24, 0x9F	; 159
 53e:	9f e0       	ldi	r25, 0x0F	; 15
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_displayCharacter+0x28>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_displayCharacter+0x2e>
 546:	00 00       	nop
 548:	4c 2f       	mov	r20, r28
 54a:	40 71       	andi	r20, 0x10	; 16
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	55 95       	asr	r21
 550:	47 95       	ror	r20
 552:	55 95       	asr	r21
 554:	47 95       	ror	r20
 556:	55 95       	asr	r21
 558:	47 95       	ror	r20
 55a:	55 95       	asr	r21
 55c:	47 95       	ror	r20
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	82 e0       	ldi	r24, 0x02	; 2
 562:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 566:	4c 2f       	mov	r20, r28
 568:	40 72       	andi	r20, 0x20	; 32
 56a:	50 e0       	ldi	r21, 0x00	; 0
 56c:	55 95       	asr	r21
 56e:	47 95       	ror	r20
 570:	55 95       	asr	r21
 572:	47 95       	ror	r20
 574:	55 95       	asr	r21
 576:	47 95       	ror	r20
 578:	55 95       	asr	r21
 57a:	47 95       	ror	r20
 57c:	55 95       	asr	r21
 57e:	47 95       	ror	r20
 580:	61 e0       	ldi	r22, 0x01	; 1
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 588:	4c 2f       	mov	r20, r28
 58a:	40 74       	andi	r20, 0x40	; 64
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	04 2e       	mov	r0, r20
 590:	45 2f       	mov	r20, r21
 592:	00 0c       	add	r0, r0
 594:	44 1f       	adc	r20, r20
 596:	55 0b       	sbc	r21, r21
 598:	00 0c       	add	r0, r0
 59a:	44 1f       	adc	r20, r20
 59c:	55 1f       	adc	r21, r21
 59e:	62 e0       	ldi	r22, 0x02	; 2
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 5a6:	4c 2f       	mov	r20, r28
 5a8:	44 1f       	adc	r20, r20
 5aa:	44 27       	eor	r20, r20
 5ac:	44 1f       	adc	r20, r20
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 5b6:	8f e9       	ldi	r24, 0x9F	; 159
 5b8:	9f e0       	ldi	r25, 0x0F	; 15
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	f1 f7       	brne	.-4      	; 0x5ba <LCD_displayCharacter+0xa2>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <LCD_displayCharacter+0xa8>
 5c0:	00 00       	nop
 5c2:	40 e0       	ldi	r20, 0x00	; 0
 5c4:	62 e0       	ldi	r22, 0x02	; 2
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 5cc:	8f e9       	ldi	r24, 0x9F	; 159
 5ce:	9f e0       	ldi	r25, 0x0F	; 15
 5d0:	01 97       	sbiw	r24, 0x01	; 1
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <LCD_displayCharacter+0xb8>
 5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <LCD_displayCharacter+0xbe>
 5d6:	00 00       	nop
 5d8:	41 e0       	ldi	r20, 0x01	; 1
 5da:	62 e0       	ldi	r22, 0x02	; 2
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 5e2:	8f e9       	ldi	r24, 0x9F	; 159
 5e4:	9f e0       	ldi	r25, 0x0F	; 15
 5e6:	01 97       	sbiw	r24, 0x01	; 1
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <LCD_displayCharacter+0xce>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <LCD_displayCharacter+0xd4>
 5ec:	00 00       	nop
 5ee:	4c 2f       	mov	r20, r28
 5f0:	41 70       	andi	r20, 0x01	; 1
 5f2:	60 e0       	ldi	r22, 0x00	; 0
 5f4:	82 e0       	ldi	r24, 0x02	; 2
 5f6:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 5fa:	4c 2f       	mov	r20, r28
 5fc:	42 70       	andi	r20, 0x02	; 2
 5fe:	50 e0       	ldi	r21, 0x00	; 0
 600:	55 95       	asr	r21
 602:	47 95       	ror	r20
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 60c:	4c 2f       	mov	r20, r28
 60e:	44 70       	andi	r20, 0x04	; 4
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	55 95       	asr	r21
 614:	47 95       	ror	r20
 616:	55 95       	asr	r21
 618:	47 95       	ror	r20
 61a:	62 e0       	ldi	r22, 0x02	; 2
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 622:	c8 70       	andi	r28, 0x08	; 8
 624:	4c 2f       	mov	r20, r28
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	55 95       	asr	r21
 62a:	47 95       	ror	r20
 62c:	55 95       	asr	r21
 62e:	47 95       	ror	r20
 630:	55 95       	asr	r21
 632:	47 95       	ror	r20
 634:	63 e0       	ldi	r22, 0x03	; 3
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 63c:	8f e9       	ldi	r24, 0x9F	; 159
 63e:	9f e0       	ldi	r25, 0x0F	; 15
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	f1 f7       	brne	.-4      	; 0x640 <LCD_displayCharacter+0x128>
 644:	00 c0       	rjmp	.+0      	; 0x646 <LCD_displayCharacter+0x12e>
 646:	00 00       	nop
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	62 e0       	ldi	r22, 0x02	; 2
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 652:	8f e9       	ldi	r24, 0x9F	; 159
 654:	9f e0       	ldi	r25, 0x0F	; 15
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	f1 f7       	brne	.-4      	; 0x656 <LCD_displayCharacter+0x13e>
 65a:	00 c0       	rjmp	.+0      	; 0x65c <LCD_displayCharacter+0x144>
 65c:	00 00       	nop
 65e:	cf 91       	pop	r28
 660:	08 95       	ret

00000662 <LCD_displayString>:
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	ec 01       	movw	r28, r24
 668:	03 c0       	rjmp	.+6      	; 0x670 <LCD_displayString+0xe>
 66a:	0e 94 8c 02 	call	0x518	; 0x518 <LCD_displayCharacter>
 66e:	21 96       	adiw	r28, 0x01	; 1
 670:	88 81       	ld	r24, Y
 672:	81 11       	cpse	r24, r1
 674:	fa cf       	rjmp	.-12     	; 0x66a <LCD_displayString+0x8>
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	08 95       	ret

0000067c <LCD_moveCursor>:
 67c:	81 30       	cpi	r24, 0x01	; 1
 67e:	31 f0       	breq	.+12     	; 0x68c <LCD_moveCursor+0x10>
 680:	70 f0       	brcs	.+28     	; 0x69e <LCD_moveCursor+0x22>
 682:	82 30       	cpi	r24, 0x02	; 2
 684:	31 f0       	breq	.+12     	; 0x692 <LCD_moveCursor+0x16>
 686:	83 30       	cpi	r24, 0x03	; 3
 688:	39 f0       	breq	.+14     	; 0x698 <LCD_moveCursor+0x1c>
 68a:	0a c0       	rjmp	.+20     	; 0x6a0 <LCD_moveCursor+0x24>
 68c:	90 e4       	ldi	r25, 0x40	; 64
 68e:	96 0f       	add	r25, r22
 690:	07 c0       	rjmp	.+14     	; 0x6a0 <LCD_moveCursor+0x24>
 692:	90 e1       	ldi	r25, 0x10	; 16
 694:	96 0f       	add	r25, r22
 696:	04 c0       	rjmp	.+8      	; 0x6a0 <LCD_moveCursor+0x24>
 698:	90 e5       	ldi	r25, 0x50	; 80
 69a:	96 0f       	add	r25, r22
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <LCD_moveCursor+0x24>
 69e:	96 2f       	mov	r25, r22
 6a0:	89 2f       	mov	r24, r25
 6a2:	80 68       	ori	r24, 0x80	; 128
 6a4:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_sendCommand>
 6a8:	08 95       	ret

000006aa <LCD_intgerToString>:


void LCD_intgerToString(int data)
{
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
 6b2:	60 97       	sbiw	r28, 0x10	; 16
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	de bf       	out	0x3e, r29	; 62
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	cd bf       	out	0x3d, r28	; 61
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 6be:	4a e0       	ldi	r20, 0x0A	; 10
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	be 01       	movw	r22, r28
 6c4:	6f 5f       	subi	r22, 0xFF	; 255
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	0e 94 36 07 	call	0xe6c	; 0xe6c <itoa>
	LCD_displayString(buff); /* Display the string */
 6cc:	ce 01       	movw	r24, r28
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	0e 94 31 03 	call	0x662	; 0x662 <LCD_displayString>
}
 6d4:	60 96       	adiw	r28, 0x10	; 16
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	de bf       	out	0x3e, r29	; 62
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	cd bf       	out	0x3d, r28	; 61
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <LED_init>:
#include "../HAL/LED_cfg.h"
#include <util/delay.h>

void LED_init(uint8 PORTID, uint8 PINID)
{
	DIO_voidSetPinDirection(PORTID,PINID,OUTPUT_PIN);
 6e6:	41 e0       	ldi	r20, 0x01	; 1
 6e8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 6ec:	08 95       	ret

000006ee <LED_ON>:
}

void LED_ON(uint8 PORTID, uint8 PINID)
{
	DIO_voidSetPinValue(PORTID, PINID, LOGIC_HIGH);
 6ee:	41 e0       	ldi	r20, 0x01	; 1
 6f0:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 6f4:	08 95       	ret

000006f6 <LED_OFF>:
}

void LED_OFF(uint8 PORTID, uint8 PINID)
{
	DIO_voidSetPinValue(PORTID, PINID, LOGIC_LOW);
 6f6:	40 e0       	ldi	r20, 0x00	; 0
 6f8:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 6fc:	08 95       	ret

000006fe <DcMotor_init>:
#include "../MCAL/TIMER_interface.h"


void DcMotor_init(void)
{
	DIO_voidSetPinDirection(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,OUTPUT_PIN);
 6fe:	41 e0       	ldi	r20, 0x01	; 1
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,OUTPUT_PIN);
 708:	41 e0       	ldi	r20, 0x01	; 1
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
 712:	40 e0       	ldi	r20, 0x00	; 0
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
 71c:	40 e0       	ldi	r20, 0x00	; 0
 71e:	61 e0       	ldi	r22, 0x01	; 1
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
 726:	08 95       	ret

00000728 <DcMotor_Rotate>:
}


void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
 728:	cf 93       	push	r28
 72a:	c8 2f       	mov	r28, r24
 72c:	86 2f       	mov	r24, r22
	set_OCR(speed);
 72e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <set_OCR>

	switch(state)
 732:	c1 30       	cpi	r28, 0x01	; 1
 734:	69 f0       	breq	.+26     	; 0x750 <DcMotor_Rotate+0x28>
 736:	c2 30       	cpi	r28, 0x02	; 2
 738:	b1 f0       	breq	.+44     	; 0x766 <DcMotor_Rotate+0x3e>
	{
		default:
		case STOP:
		DIO_voidSetPinValue(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
 73a:	40 e0       	ldi	r20, 0x00	; 0
 73c:	60 e0       	ldi	r22, 0x00	; 0
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
 744:	40 e0       	ldi	r20, 0x00	; 0
 746:	61 e0       	ldi	r22, 0x01	; 1
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
		break;
 74e:	15 c0       	rjmp	.+42     	; 0x77a <DcMotor_Rotate+0x52>
		case A_CW:
		DIO_voidSetPinValue(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_HIGH);
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
 75a:	40 e0       	ldi	r20, 0x00	; 0
 75c:	61 e0       	ldi	r22, 0x01	; 1
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
		break;
 764:	0a c0       	rjmp	.+20     	; 0x77a <DcMotor_Rotate+0x52>
		case CW:
		DIO_voidSetPinValue(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_HIGH);
 770:	41 e0       	ldi	r20, 0x01	; 1
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <DIO_voidSetPinValue>
		break;
	}
 77a:	cf 91       	pop	r28
 77c:	08 95       	ret

0000077e <ADC_autotrigger_init>:
}

void ADC_autotrigger_init(void)
{
	/*disable ADC*/
	CLEAR_BIT(ADCSRA,ADEN);
 77e:	86 b1       	in	r24, 0x06	; 6
 780:	8f 77       	andi	r24, 0x7F	; 127
 782:	86 b9       	out	0x06, r24	; 6
	
	/*use AVCC*/
	SET_BIT(ADMUX,REFS0);
 784:	87 b1       	in	r24, 0x07	; 7
 786:	80 64       	ori	r24, 0x40	; 64
 788:	87 b9       	out	0x07, r24	; 7
	CLEAR_BIT(ADMUX,REFS1);
 78a:	87 b1       	in	r24, 0x07	; 7
 78c:	8f 77       	andi	r24, 0x7F	; 127
 78e:	87 b9       	out	0x07, r24	; 7
	
	/*Right adjustment*/
	CLEAR_BIT(ADMUX,REFS1);
 790:	87 b1       	in	r24, 0x07	; 7
 792:	8f 77       	andi	r24, 0x7F	; 127
 794:	87 b9       	out	0x07, r24	; 7
	
	/*Select Prescaler 128*/
	SET_BIT(ADCSRA,ADPS0);
 796:	86 b1       	in	r24, 0x06	; 6
 798:	81 60       	ori	r24, 0x01	; 1
 79a:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
 79c:	86 b1       	in	r24, 0x06	; 6
 79e:	82 60       	ori	r24, 0x02	; 2
 7a0:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
 7a2:	86 b1       	in	r24, 0x06	; 6
 7a4:	84 60       	ori	r24, 0x04	; 4
 7a6:	86 b9       	out	0x06, r24	; 6
	
	/*Disable ADC Interrupts*/
	CLEAR_BIT(ADCSRA,ADIE);
 7a8:	86 b1       	in	r24, 0x06	; 6
 7aa:	87 7f       	andi	r24, 0xF7	; 247
 7ac:	86 b9       	out	0x06, r24	; 6
	
	/*enable auto triggering*/
	SET_BIT(ADCSRA,ADATE);
 7ae:	86 b1       	in	r24, 0x06	; 6
 7b0:	80 62       	ori	r24, 0x20	; 32
 7b2:	86 b9       	out	0x06, r24	; 6
	
	/*specify the source of auto triggering*/
	CLEAR_BIT(SFIOR,ADTS0);
 7b4:	80 b7       	in	r24, 0x30	; 48
 7b6:	8f 7d       	andi	r24, 0xDF	; 223
 7b8:	80 bf       	out	0x30, r24	; 48
	SET_BIT(SFIOR,ADTS1);
 7ba:	80 b7       	in	r24, 0x30	; 48
 7bc:	80 64       	ori	r24, 0x40	; 64
 7be:	80 bf       	out	0x30, r24	; 48
	CLEAR_BIT(SFIOR,ADTS2);
 7c0:	80 b7       	in	r24, 0x30	; 48
 7c2:	8f 77       	andi	r24, 0x7F	; 127
 7c4:	80 bf       	out	0x30, r24	; 48
	
	/*clear start conversion*/
	CLEAR_BIT(ADCSRA,ADSC);
 7c6:	86 b1       	in	r24, 0x06	; 6
 7c8:	8f 7b       	andi	r24, 0xBF	; 191
 7ca:	86 b9       	out	0x06, r24	; 6
	
	/*Clear flag*/
	SET_BIT(ADCSRA,ADIF);
 7cc:	86 b1       	in	r24, 0x06	; 6
 7ce:	80 61       	ori	r24, 0x10	; 16
 7d0:	86 b9       	out	0x06, r24	; 6
	
	/*enable ADC*/
	SET_BIT(ADCSRA,ADEN);
 7d2:	86 b1       	in	r24, 0x06	; 6
 7d4:	80 68       	ori	r24, 0x80	; 128
 7d6:	86 b9       	out	0x06, r24	; 6
 7d8:	08 95       	ret

000007da <ADC_autotrigger_readChannel>:
}

void ADC_autotrigger_readChannel(uint8 CH_num, uint16* ptr)
{
	/*initialize channel to 0*/
	ADMUX |= ((ADMUX & 0xE0) | (CH_num & 0x07));
 7da:	27 b1       	in	r18, 0x07	; 7
 7dc:	97 b1       	in	r25, 0x07	; 7
 7de:	20 7e       	andi	r18, 0xE0	; 224
 7e0:	87 70       	andi	r24, 0x07	; 7
 7e2:	82 2b       	or	r24, r18
 7e4:	98 2b       	or	r25, r24
 7e6:	97 b9       	out	0x07, r25	; 7
		
	/*wait for flag*/
	while(BIT_IS_CLEAR(ADCSRA,ADIF));
 7e8:	34 9b       	sbis	0x06, 4	; 6
 7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <ADC_autotrigger_readChannel+0xe>
	
	/*save the data*/
	*ptr = ADC;
 7ec:	84 b1       	in	r24, 0x04	; 4
 7ee:	95 b1       	in	r25, 0x05	; 5
 7f0:	fb 01       	movw	r30, r22
 7f2:	91 83       	std	Z+1, r25	; 0x01
 7f4:	80 83       	st	Z, r24
	
	/*clear flag*/
	SET_BIT(ADCSRA,ADIF);
 7f6:	86 b1       	in	r24, 0x06	; 6
 7f8:	80 61       	ori	r24, 0x10	; 16
 7fa:	86 b9       	out	0x06, r24	; 6
 7fc:	08 95       	ret

000007fe <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinDir)
{
	switch(copy_u8PortID)
 7fe:	81 30       	cpi	r24, 0x01	; 1
 800:	01 f1       	breq	.+64     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 802:	30 f0       	brcs	.+12     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 804:	82 30       	cpi	r24, 0x02	; 2
 806:	b1 f1       	breq	.+108    	; 0x874 <__stack+0x15>
 808:	83 30       	cpi	r24, 0x03	; 3
 80a:	09 f4       	brne	.+2      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 80c:	4c c0       	rjmp	.+152    	; 0x8a6 <__stack+0x47>
 80e:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 810:	41 30       	cpi	r20, 0x01	; 1
 812:	59 f4       	brne	.+22     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
		{
			SET_BIT(DDRA,copy_u8PinID);
 814:	2a b3       	in	r18, 0x1a	; 26
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	6a 95       	dec	r22
 822:	e2 f7       	brpl	.-8      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 824:	82 2b       	or	r24, r18
 826:	8a bb       	out	0x1a, r24	; 26
 828:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,copy_u8PinID);
 82a:	2a b3       	in	r18, 0x1a	; 26
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	6a 95       	dec	r22
 838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 83a:	80 95       	com	r24
 83c:	82 23       	and	r24, r18
 83e:	8a bb       	out	0x1a, r24	; 26
 840:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 842:	41 30       	cpi	r20, 0x01	; 1
 844:	59 f4       	brne	.+22     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
		{
			SET_BIT(DDRB,copy_u8PinID);
 846:	27 b3       	in	r18, 0x17	; 23
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	6a 95       	dec	r22
 854:	e2 f7       	brpl	.-8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 856:	82 2b       	or	r24, r18
 858:	87 bb       	out	0x17, r24	; 23
 85a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,copy_u8PinID);
 85c:	27 b3       	in	r18, 0x17	; 23
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	02 c0       	rjmp	.+4      	; 0x868 <__stack+0x9>
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	6a 95       	dec	r22
 86a:	e2 f7       	brpl	.-8      	; 0x864 <__stack+0x5>
 86c:	80 95       	com	r24
 86e:	82 23       	and	r24, r18
 870:	87 bb       	out	0x17, r24	; 23
 872:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 874:	41 30       	cpi	r20, 0x01	; 1
 876:	59 f4       	brne	.+22     	; 0x88e <__stack+0x2f>
		{
			SET_BIT(DDRC,copy_u8PinID);
 878:	24 b3       	in	r18, 0x14	; 20
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
 880:	88 0f       	add	r24, r24
 882:	99 1f       	adc	r25, r25
 884:	6a 95       	dec	r22
 886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
 888:	82 2b       	or	r24, r18
 88a:	84 bb       	out	0x14, r24	; 20
 88c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,copy_u8PinID);
 88e:	24 b3       	in	r18, 0x14	; 20
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
 896:	88 0f       	add	r24, r24
 898:	99 1f       	adc	r25, r25
 89a:	6a 95       	dec	r22
 89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
 89e:	80 95       	com	r24
 8a0:	82 23       	and	r24, r18
 8a2:	84 bb       	out	0x14, r24	; 20
 8a4:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 8a6:	41 30       	cpi	r20, 0x01	; 1
 8a8:	59 f4       	brne	.+22     	; 0x8c0 <__stack+0x61>
		{
			SET_BIT(DDRD,copy_u8PinID);
 8aa:	21 b3       	in	r18, 0x11	; 17
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <__stack+0x57>
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	6a 95       	dec	r22
 8b8:	e2 f7       	brpl	.-8      	; 0x8b2 <__stack+0x53>
 8ba:	82 2b       	or	r24, r18
 8bc:	81 bb       	out	0x11, r24	; 17
 8be:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,copy_u8PinID);
 8c0:	21 b3       	in	r18, 0x11	; 17
 8c2:	81 e0       	ldi	r24, 0x01	; 1
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
 8c8:	88 0f       	add	r24, r24
 8ca:	99 1f       	adc	r25, r25
 8cc:	6a 95       	dec	r22
 8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
 8d0:	80 95       	com	r24
 8d2:	82 23       	and	r24, r18
 8d4:	81 bb       	out	0x11, r24	; 17
 8d6:	08 95       	ret

000008d8 <DIO_voidSetPinValue>:
		
	}
}
void DIO_voidSetPinValue(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinValue)
{
	switch(copy_u8PortID)
 8d8:	81 30       	cpi	r24, 0x01	; 1
 8da:	01 f1       	breq	.+64     	; 0x91c <DIO_voidSetPinValue+0x44>
 8dc:	30 f0       	brcs	.+12     	; 0x8ea <DIO_voidSetPinValue+0x12>
 8de:	82 30       	cpi	r24, 0x02	; 2
 8e0:	b1 f1       	breq	.+108    	; 0x94e <DIO_voidSetPinValue+0x76>
 8e2:	83 30       	cpi	r24, 0x03	; 3
 8e4:	09 f4       	brne	.+2      	; 0x8e8 <DIO_voidSetPinValue+0x10>
 8e6:	4c c0       	rjmp	.+152    	; 0x980 <DIO_voidSetPinValue+0xa8>
 8e8:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 8ea:	41 30       	cpi	r20, 0x01	; 1
 8ec:	59 f4       	brne	.+22     	; 0x904 <DIO_voidSetPinValue+0x2c>
		{
			SET_BIT(PORTA,copy_u8PinID);
 8ee:	2b b3       	in	r18, 0x1b	; 27
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <DIO_voidSetPinValue+0x22>
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	6a 95       	dec	r22
 8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <DIO_voidSetPinValue+0x1e>
 8fe:	82 2b       	or	r24, r18
 900:	8b bb       	out	0x1b, r24	; 27
 902:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,copy_u8PinID);
 904:	2b b3       	in	r18, 0x1b	; 27
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	02 c0       	rjmp	.+4      	; 0x910 <DIO_voidSetPinValue+0x38>
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	6a 95       	dec	r22
 912:	e2 f7       	brpl	.-8      	; 0x90c <DIO_voidSetPinValue+0x34>
 914:	80 95       	com	r24
 916:	82 23       	and	r24, r18
 918:	8b bb       	out	0x1b, r24	; 27
 91a:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 91c:	41 30       	cpi	r20, 0x01	; 1
 91e:	59 f4       	brne	.+22     	; 0x936 <DIO_voidSetPinValue+0x5e>
		{
			SET_BIT(PORTB,copy_u8PinID);
 920:	28 b3       	in	r18, 0x18	; 24
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	02 c0       	rjmp	.+4      	; 0x92c <DIO_voidSetPinValue+0x54>
 928:	88 0f       	add	r24, r24
 92a:	99 1f       	adc	r25, r25
 92c:	6a 95       	dec	r22
 92e:	e2 f7       	brpl	.-8      	; 0x928 <DIO_voidSetPinValue+0x50>
 930:	82 2b       	or	r24, r18
 932:	88 bb       	out	0x18, r24	; 24
 934:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,copy_u8PinID);
 936:	28 b3       	in	r18, 0x18	; 24
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_voidSetPinValue+0x6a>
 93e:	88 0f       	add	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	6a 95       	dec	r22
 944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_voidSetPinValue+0x66>
 946:	80 95       	com	r24
 948:	82 23       	and	r24, r18
 94a:	88 bb       	out	0x18, r24	; 24
 94c:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 94e:	41 30       	cpi	r20, 0x01	; 1
 950:	59 f4       	brne	.+22     	; 0x968 <DIO_voidSetPinValue+0x90>
		{
			SET_BIT(PORTC,copy_u8PinID);
 952:	25 b3       	in	r18, 0x15	; 21
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	02 c0       	rjmp	.+4      	; 0x95e <DIO_voidSetPinValue+0x86>
 95a:	88 0f       	add	r24, r24
 95c:	99 1f       	adc	r25, r25
 95e:	6a 95       	dec	r22
 960:	e2 f7       	brpl	.-8      	; 0x95a <DIO_voidSetPinValue+0x82>
 962:	82 2b       	or	r24, r18
 964:	85 bb       	out	0x15, r24	; 21
 966:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,copy_u8PinID);
 968:	25 b3       	in	r18, 0x15	; 21
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	02 c0       	rjmp	.+4      	; 0x974 <DIO_voidSetPinValue+0x9c>
 970:	88 0f       	add	r24, r24
 972:	99 1f       	adc	r25, r25
 974:	6a 95       	dec	r22
 976:	e2 f7       	brpl	.-8      	; 0x970 <DIO_voidSetPinValue+0x98>
 978:	80 95       	com	r24
 97a:	82 23       	and	r24, r18
 97c:	85 bb       	out	0x15, r24	; 21
 97e:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 980:	41 30       	cpi	r20, 0x01	; 1
 982:	59 f4       	brne	.+22     	; 0x99a <DIO_voidSetPinValue+0xc2>
		{
			SET_BIT(PORTD,copy_u8PinID);
 984:	22 b3       	in	r18, 0x12	; 18
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <DIO_voidSetPinValue+0xb8>
 98c:	88 0f       	add	r24, r24
 98e:	99 1f       	adc	r25, r25
 990:	6a 95       	dec	r22
 992:	e2 f7       	brpl	.-8      	; 0x98c <DIO_voidSetPinValue+0xb4>
 994:	82 2b       	or	r24, r18
 996:	82 bb       	out	0x12, r24	; 18
 998:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,copy_u8PinID);
 99a:	22 b3       	in	r18, 0x12	; 18
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <DIO_voidSetPinValue+0xce>
 9a2:	88 0f       	add	r24, r24
 9a4:	99 1f       	adc	r25, r25
 9a6:	6a 95       	dec	r22
 9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <DIO_voidSetPinValue+0xca>
 9aa:	80 95       	com	r24
 9ac:	82 23       	and	r24, r18
 9ae:	82 bb       	out	0x12, r24	; 18
 9b0:	08 95       	ret

000009b2 <DIO_voidGetPinValue>:
}

uint8 DIO_voidGetPinValue(uint8 copy_u8PortID, uint8 copy_PinID)
{
	uint8 value = LOGIC_LOW;
	switch(copy_u8PortID)
 9b2:	81 30       	cpi	r24, 0x01	; 1
 9b4:	89 f0       	breq	.+34     	; 0x9d8 <DIO_voidGetPinValue+0x26>
 9b6:	28 f0       	brcs	.+10     	; 0x9c2 <DIO_voidGetPinValue+0x10>
 9b8:	82 30       	cpi	r24, 0x02	; 2
 9ba:	c9 f0       	breq	.+50     	; 0x9ee <DIO_voidGetPinValue+0x3c>
 9bc:	83 30       	cpi	r24, 0x03	; 3
 9be:	11 f1       	breq	.+68     	; 0xa04 <DIO_voidGetPinValue+0x52>
 9c0:	2c c0       	rjmp	.+88     	; 0xa1a <DIO_voidGetPinValue+0x68>
	{
		case PORTA_ID:
		if(BIT_IS_SET(PINA,copy_PinID))
 9c2:	89 b3       	in	r24, 0x19	; 25
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	02 c0       	rjmp	.+4      	; 0x9cc <DIO_voidGetPinValue+0x1a>
 9c8:	95 95       	asr	r25
 9ca:	87 95       	ror	r24
 9cc:	6a 95       	dec	r22
 9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <DIO_voidGetPinValue+0x16>
 9d0:	80 ff       	sbrs	r24, 0
 9d2:	25 c0       	rjmp	.+74     	; 0xa1e <DIO_voidGetPinValue+0x6c>
		{
			value = LOGIC_HIGH;
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	08 95       	ret
			value = LOGIC_LOW;
		}
		break;
		
		case PORTB_ID:
		if(BIT_IS_SET(PINB,copy_PinID))
 9d8:	86 b3       	in	r24, 0x16	; 22
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_voidGetPinValue+0x30>
 9de:	95 95       	asr	r25
 9e0:	87 95       	ror	r24
 9e2:	6a 95       	dec	r22
 9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_voidGetPinValue+0x2c>
 9e6:	80 ff       	sbrs	r24, 0
 9e8:	1c c0       	rjmp	.+56     	; 0xa22 <DIO_voidGetPinValue+0x70>
		{
			value = LOGIC_HIGH;
 9ea:	81 e0       	ldi	r24, 0x01	; 1
 9ec:	08 95       	ret
			value = LOGIC_LOW;
		}
		break;
		
		case PORTC_ID:
		if(BIT_IS_SET(PINC,copy_PinID))
 9ee:	83 b3       	in	r24, 0x13	; 19
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	02 c0       	rjmp	.+4      	; 0x9f8 <DIO_voidGetPinValue+0x46>
 9f4:	95 95       	asr	r25
 9f6:	87 95       	ror	r24
 9f8:	6a 95       	dec	r22
 9fa:	e2 f7       	brpl	.-8      	; 0x9f4 <DIO_voidGetPinValue+0x42>
 9fc:	80 ff       	sbrs	r24, 0
 9fe:	13 c0       	rjmp	.+38     	; 0xa26 <DIO_voidGetPinValue+0x74>
		{
			value = LOGIC_HIGH;
 a00:	81 e0       	ldi	r24, 0x01	; 1
 a02:	08 95       	ret
			value = LOGIC_LOW;
		}
		break;
		
		case PORTD_ID:
		if(BIT_IS_SET(PIND,copy_PinID))
 a04:	80 b3       	in	r24, 0x10	; 16
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_voidGetPinValue+0x5c>
 a0a:	95 95       	asr	r25
 a0c:	87 95       	ror	r24
 a0e:	6a 95       	dec	r22
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_voidGetPinValue+0x58>
 a12:	80 ff       	sbrs	r24, 0
 a14:	0a c0       	rjmp	.+20     	; 0xa2a <DIO_voidGetPinValue+0x78>
		{
			value = LOGIC_HIGH;
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	08 95       	ret
	}
}

uint8 DIO_voidGetPinValue(uint8 copy_u8PortID, uint8 copy_PinID)
{
	uint8 value = LOGIC_LOW;
 a1a:	80 e0       	ldi	r24, 0x00	; 0
 a1c:	08 95       	ret
		{
			value = LOGIC_HIGH;
		}
		else
		{
			value = LOGIC_LOW;
 a1e:	80 e0       	ldi	r24, 0x00	; 0
 a20:	08 95       	ret
		{
			value = LOGIC_HIGH;
		}
		else
		{
			value = LOGIC_LOW;
 a22:	80 e0       	ldi	r24, 0x00	; 0
 a24:	08 95       	ret
		{
			value = LOGIC_HIGH;
		}
		else
		{
			value = LOGIC_LOW;
 a26:	80 e0       	ldi	r24, 0x00	; 0
 a28:	08 95       	ret
		{
			value = LOGIC_HIGH;
		}
		else
		{
			value = LOGIC_LOW;
 a2a:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}
	return value;
}
 a2c:	08 95       	ret

00000a2e <EXT_init>:
void (*EXT1_ptr)(void);
void (*EXT2_ptr)(void);


void EXT_init(uint8 EXT_num, uint8 EXT_sense)
{
 a2e:	cf 93       	push	r28
 a30:	c6 2f       	mov	r28, r22
	switch(EXT_num)
 a32:	81 30       	cpi	r24, 0x01	; 1
 a34:	89 f1       	breq	.+98     	; 0xa98 <EXT_init+0x6a>
 a36:	20 f0       	brcs	.+8      	; 0xa40 <EXT_init+0x12>
 a38:	82 30       	cpi	r24, 0x02	; 2
 a3a:	09 f4       	brne	.+2      	; 0xa3e <EXT_init+0x10>
 a3c:	59 c0       	rjmp	.+178    	; 0xaf0 <EXT_init+0xc2>
 a3e:	6c c0       	rjmp	.+216    	; 0xb18 <EXT_init+0xea>
	{
		case EXT_0:
		DIO_voidSetPinDirection(EXT_0_PORT_ID,EXT_0_PIN_ID,INPUT_PIN);
 a40:	40 e0       	ldi	r20, 0x00	; 0
 a42:	62 e0       	ldi	r22, 0x02	; 2
 a44:	83 e0       	ldi	r24, 0x03	; 3
 a46:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
		SET_BIT(GICR,INT0_EN);
 a4a:	8b b7       	in	r24, 0x3b	; 59
 a4c:	80 64       	ori	r24, 0x40	; 64
 a4e:	8b bf       	out	0x3b, r24	; 59
		switch(EXT_sense)
 a50:	c1 30       	cpi	r28, 0x01	; 1
 a52:	69 f0       	breq	.+26     	; 0xa6e <EXT_init+0x40>
 a54:	28 f0       	brcs	.+10     	; 0xa60 <EXT_init+0x32>
 a56:	c2 30       	cpi	r28, 0x02	; 2
 a58:	89 f0       	breq	.+34     	; 0xa7c <EXT_init+0x4e>
 a5a:	c3 30       	cpi	r28, 0x03	; 3
 a5c:	b1 f0       	breq	.+44     	; 0xa8a <EXT_init+0x5c>
 a5e:	5c c0       	rjmp	.+184    	; 0xb18 <EXT_init+0xea>
		{
			case LOW_LEVEL:
			CLEAR_BIT(MCUCR,ISC00);
 a60:	85 b7       	in	r24, 0x35	; 53
 a62:	8e 7f       	andi	r24, 0xFE	; 254
 a64:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
 a66:	85 b7       	in	r24, 0x35	; 53
 a68:	8d 7f       	andi	r24, 0xFD	; 253
 a6a:	85 bf       	out	0x35, r24	; 53
			break;
 a6c:	55 c0       	rjmp	.+170    	; 0xb18 <EXT_init+0xea>
			case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00);
 a6e:	85 b7       	in	r24, 0x35	; 53
 a70:	81 60       	ori	r24, 0x01	; 1
 a72:	85 bf       	out	0x35, r24	; 53
			CLEAR_BIT(MCUCR,ISC01);
 a74:	85 b7       	in	r24, 0x35	; 53
 a76:	8d 7f       	andi	r24, 0xFD	; 253
 a78:	85 bf       	out	0x35, r24	; 53
			break;
 a7a:	4e c0       	rjmp	.+156    	; 0xb18 <EXT_init+0xea>
			case FALLING:
			CLEAR_BIT(MCUCR,ISC00);
 a7c:	85 b7       	in	r24, 0x35	; 53
 a7e:	8e 7f       	andi	r24, 0xFE	; 254
 a80:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 a82:	85 b7       	in	r24, 0x35	; 53
 a84:	82 60       	ori	r24, 0x02	; 2
 a86:	85 bf       	out	0x35, r24	; 53
			break;
 a88:	47 c0       	rjmp	.+142    	; 0xb18 <EXT_init+0xea>
			case RISING:
			SET_BIT(MCUCR,ISC00);
 a8a:	85 b7       	in	r24, 0x35	; 53
 a8c:	81 60       	ori	r24, 0x01	; 1
 a8e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01);
 a90:	85 b7       	in	r24, 0x35	; 53
 a92:	82 60       	ori	r24, 0x02	; 2
 a94:	85 bf       	out	0x35, r24	; 53
			break;	
 a96:	40 c0       	rjmp	.+128    	; 0xb18 <EXT_init+0xea>
		}
		break;
	case EXT_1:
	DIO_voidSetPinDirection(EXT_1_PORT_ID,EXT_1_PIN_ID,INPUT_PIN);
 a98:	40 e0       	ldi	r20, 0x00	; 0
 a9a:	63 e0       	ldi	r22, 0x03	; 3
 a9c:	83 e0       	ldi	r24, 0x03	; 3
 a9e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	SET_BIT(GICR,INT1_EN);
 aa2:	8b b7       	in	r24, 0x3b	; 59
 aa4:	80 68       	ori	r24, 0x80	; 128
 aa6:	8b bf       	out	0x3b, r24	; 59
	switch(EXT_sense)
 aa8:	c1 30       	cpi	r28, 0x01	; 1
 aaa:	69 f0       	breq	.+26     	; 0xac6 <EXT_init+0x98>
 aac:	28 f0       	brcs	.+10     	; 0xab8 <EXT_init+0x8a>
 aae:	c2 30       	cpi	r28, 0x02	; 2
 ab0:	89 f0       	breq	.+34     	; 0xad4 <EXT_init+0xa6>
 ab2:	c3 30       	cpi	r28, 0x03	; 3
 ab4:	b1 f0       	breq	.+44     	; 0xae2 <EXT_init+0xb4>
 ab6:	30 c0       	rjmp	.+96     	; 0xb18 <EXT_init+0xea>
	{
		case LOW_LEVEL:
		CLEAR_BIT(MCUCR,ISC10);
 ab8:	85 b7       	in	r24, 0x35	; 53
 aba:	8b 7f       	andi	r24, 0xFB	; 251
 abc:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,ISC11);
 abe:	85 b7       	in	r24, 0x35	; 53
 ac0:	87 7f       	andi	r24, 0xF7	; 247
 ac2:	85 bf       	out	0x35, r24	; 53
		break;
 ac4:	29 c0       	rjmp	.+82     	; 0xb18 <EXT_init+0xea>
		case LOGICAL_CHANGE:
		SET_BIT(MCUCR,ISC10);
 ac6:	85 b7       	in	r24, 0x35	; 53
 ac8:	84 60       	ori	r24, 0x04	; 4
 aca:	85 bf       	out	0x35, r24	; 53
		CLEAR_BIT(MCUCR,ISC11);
 acc:	85 b7       	in	r24, 0x35	; 53
 ace:	87 7f       	andi	r24, 0xF7	; 247
 ad0:	85 bf       	out	0x35, r24	; 53
		break;
 ad2:	22 c0       	rjmp	.+68     	; 0xb18 <EXT_init+0xea>
		case FALLING:
		CLEAR_BIT(MCUCR,ISC10);
 ad4:	85 b7       	in	r24, 0x35	; 53
 ad6:	8b 7f       	andi	r24, 0xFB	; 251
 ad8:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,ISC11);
 ada:	85 b7       	in	r24, 0x35	; 53
 adc:	88 60       	ori	r24, 0x08	; 8
 ade:	85 bf       	out	0x35, r24	; 53
		break;
 ae0:	1b c0       	rjmp	.+54     	; 0xb18 <EXT_init+0xea>
		case RISING:
		SET_BIT(MCUCR,ISC10);
 ae2:	85 b7       	in	r24, 0x35	; 53
 ae4:	84 60       	ori	r24, 0x04	; 4
 ae6:	85 bf       	out	0x35, r24	; 53
		SET_BIT(MCUCR,ISC11);
 ae8:	85 b7       	in	r24, 0x35	; 53
 aea:	88 60       	ori	r24, 0x08	; 8
 aec:	85 bf       	out	0x35, r24	; 53
		break;
 aee:	14 c0       	rjmp	.+40     	; 0xb18 <EXT_init+0xea>
	}
	break;
	case EXT_2:
	DIO_voidSetPinDirection(EXT_2_PORT_ID,EXT_2_PIN_ID,INPUT_PIN);
 af0:	40 e0       	ldi	r20, 0x00	; 0
 af2:	62 e0       	ldi	r22, 0x02	; 2
 af4:	81 e0       	ldi	r24, 0x01	; 1
 af6:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	SET_BIT(GICR,INT2_EN);
 afa:	8b b7       	in	r24, 0x3b	; 59
 afc:	80 62       	ori	r24, 0x20	; 32
 afe:	8b bf       	out	0x3b, r24	; 59
	switch(EXT_sense)
 b00:	c2 30       	cpi	r28, 0x02	; 2
 b02:	19 f0       	breq	.+6      	; 0xb0a <EXT_init+0xdc>
 b04:	c3 30       	cpi	r28, 0x03	; 3
 b06:	29 f0       	breq	.+10     	; 0xb12 <EXT_init+0xe4>
 b08:	07 c0       	rjmp	.+14     	; 0xb18 <EXT_init+0xea>
	{
		case FALLING:
		CLEAR_BIT(MCUCSR,ISC2);
 b0a:	84 b7       	in	r24, 0x34	; 52
 b0c:	8f 7b       	andi	r24, 0xBF	; 191
 b0e:	84 bf       	out	0x34, r24	; 52
		break;
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <EXT_init+0xea>
		case RISING:
		SET_BIT(MCUCSR,ISC2);
 b12:	84 b7       	in	r24, 0x34	; 52
 b14:	80 64       	ori	r24, 0x40	; 64
 b16:	84 bf       	out	0x34, r24	; 52
		break;
	}
	break;
	}
}
 b18:	cf 91       	pop	r28
 b1a:	08 95       	ret

00000b1c <EXT_callback>:

void EXT_callback(uint8 EXT_num, void (*ptr)(void))
{
	switch(EXT_num)
 b1c:	81 30       	cpi	r24, 0x01	; 1
 b1e:	49 f0       	breq	.+18     	; 0xb32 <EXT_callback+0x16>
 b20:	18 f0       	brcs	.+6      	; 0xb28 <EXT_callback+0xc>
 b22:	82 30       	cpi	r24, 0x02	; 2
 b24:	59 f0       	breq	.+22     	; 0xb3c <EXT_callback+0x20>
 b26:	08 95       	ret
	{
		case EXT_0:
		EXT0_ptr = ptr;
 b28:	70 93 a2 00 	sts	0x00A2, r23	; 0x8000a2 <EXT0_ptr+0x1>
 b2c:	60 93 a1 00 	sts	0x00A1, r22	; 0x8000a1 <EXT0_ptr>
		break;
 b30:	08 95       	ret
		case EXT_1:
		EXT1_ptr = ptr;
 b32:	70 93 a0 00 	sts	0x00A0, r23	; 0x8000a0 <EXT1_ptr+0x1>
 b36:	60 93 9f 00 	sts	0x009F, r22	; 0x80009f <EXT1_ptr>
		break;
 b3a:	08 95       	ret
		case EXT_2:
		EXT2_ptr = ptr;
 b3c:	70 93 9e 00 	sts	0x009E, r23	; 0x80009e <EXT2_ptr+0x1>
 b40:	60 93 9d 00 	sts	0x009D, r22	; 0x80009d <EXT2_ptr>
 b44:	08 95       	ret

00000b46 <__vector_1>:
	}
}

void __vector_1()__attribute__((signal));
void __vector_1()
{
 b46:	1f 92       	push	r1
 b48:	0f 92       	push	r0
 b4a:	0f b6       	in	r0, 0x3f	; 63
 b4c:	0f 92       	push	r0
 b4e:	11 24       	eor	r1, r1
 b50:	2f 93       	push	r18
 b52:	3f 93       	push	r19
 b54:	4f 93       	push	r20
 b56:	5f 93       	push	r21
 b58:	6f 93       	push	r22
 b5a:	7f 93       	push	r23
 b5c:	8f 93       	push	r24
 b5e:	9f 93       	push	r25
 b60:	af 93       	push	r26
 b62:	bf 93       	push	r27
 b64:	ef 93       	push	r30
 b66:	ff 93       	push	r31
	EXT0_ptr();
 b68:	e0 91 a1 00 	lds	r30, 0x00A1	; 0x8000a1 <EXT0_ptr>
 b6c:	f0 91 a2 00 	lds	r31, 0x00A2	; 0x8000a2 <EXT0_ptr+0x1>
 b70:	09 95       	icall
}
 b72:	ff 91       	pop	r31
 b74:	ef 91       	pop	r30
 b76:	bf 91       	pop	r27
 b78:	af 91       	pop	r26
 b7a:	9f 91       	pop	r25
 b7c:	8f 91       	pop	r24
 b7e:	7f 91       	pop	r23
 b80:	6f 91       	pop	r22
 b82:	5f 91       	pop	r21
 b84:	4f 91       	pop	r20
 b86:	3f 91       	pop	r19
 b88:	2f 91       	pop	r18
 b8a:	0f 90       	pop	r0
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	0f 90       	pop	r0
 b90:	1f 90       	pop	r1
 b92:	18 95       	reti

00000b94 <__vector_2>:

void __vector_2()__attribute__((signal));
void __vector_2()
{
 b94:	1f 92       	push	r1
 b96:	0f 92       	push	r0
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	0f 92       	push	r0
 b9c:	11 24       	eor	r1, r1
 b9e:	2f 93       	push	r18
 ba0:	3f 93       	push	r19
 ba2:	4f 93       	push	r20
 ba4:	5f 93       	push	r21
 ba6:	6f 93       	push	r22
 ba8:	7f 93       	push	r23
 baa:	8f 93       	push	r24
 bac:	9f 93       	push	r25
 bae:	af 93       	push	r26
 bb0:	bf 93       	push	r27
 bb2:	ef 93       	push	r30
 bb4:	ff 93       	push	r31
	EXT1_ptr();
 bb6:	e0 91 9f 00 	lds	r30, 0x009F	; 0x80009f <EXT1_ptr>
 bba:	f0 91 a0 00 	lds	r31, 0x00A0	; 0x8000a0 <EXT1_ptr+0x1>
 bbe:	09 95       	icall
}
 bc0:	ff 91       	pop	r31
 bc2:	ef 91       	pop	r30
 bc4:	bf 91       	pop	r27
 bc6:	af 91       	pop	r26
 bc8:	9f 91       	pop	r25
 bca:	8f 91       	pop	r24
 bcc:	7f 91       	pop	r23
 bce:	6f 91       	pop	r22
 bd0:	5f 91       	pop	r21
 bd2:	4f 91       	pop	r20
 bd4:	3f 91       	pop	r19
 bd6:	2f 91       	pop	r18
 bd8:	0f 90       	pop	r0
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	0f 90       	pop	r0
 bde:	1f 90       	pop	r1
 be0:	18 95       	reti

00000be2 <__vector_3>:

void __vector_3()__attribute__((signal));
void __vector_3()
{
 be2:	1f 92       	push	r1
 be4:	0f 92       	push	r0
 be6:	0f b6       	in	r0, 0x3f	; 63
 be8:	0f 92       	push	r0
 bea:	11 24       	eor	r1, r1
 bec:	2f 93       	push	r18
 bee:	3f 93       	push	r19
 bf0:	4f 93       	push	r20
 bf2:	5f 93       	push	r21
 bf4:	6f 93       	push	r22
 bf6:	7f 93       	push	r23
 bf8:	8f 93       	push	r24
 bfa:	9f 93       	push	r25
 bfc:	af 93       	push	r26
 bfe:	bf 93       	push	r27
 c00:	ef 93       	push	r30
 c02:	ff 93       	push	r31
	EXT2_ptr();
 c04:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <EXT2_ptr>
 c08:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <EXT2_ptr+0x1>
 c0c:	09 95       	icall
}
 c0e:	ff 91       	pop	r31
 c10:	ef 91       	pop	r30
 c12:	bf 91       	pop	r27
 c14:	af 91       	pop	r26
 c16:	9f 91       	pop	r25
 c18:	8f 91       	pop	r24
 c1a:	7f 91       	pop	r23
 c1c:	6f 91       	pop	r22
 c1e:	5f 91       	pop	r21
 c20:	4f 91       	pop	r20
 c22:	3f 91       	pop	r19
 c24:	2f 91       	pop	r18
 c26:	0f 90       	pop	r0
 c28:	0f be       	out	0x3f, r0	; 63
 c2a:	0f 90       	pop	r0
 c2c:	1f 90       	pop	r1
 c2e:	18 95       	reti

00000c30 <GIE_enable>:
#include "../MCAL/GIE_interface.h"
#include "../Common_Macros.h"

void GIE_enable(void)
{
	SET_BIT(SREG,I_BIT);
 c30:	8f b7       	in	r24, 0x3f	; 63
 c32:	80 68       	ori	r24, 0x80	; 128
 c34:	8f bf       	out	0x3f, r24	; 63
 c36:	08 95       	ret

00000c38 <SPI_init>:
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output	
	 ********************************************/
	DIO_voidSetPinDirection(PORTB_ID,PIN4_ID,OUTPUT_PIN);
 c38:	41 e0       	ldi	r20, 0x01	; 1
 c3a:	64 e0       	ldi	r22, 0x04	; 4
 c3c:	81 e0       	ldi	r24, 0x01	; 1
 c3e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN5_ID,OUTPUT_PIN);
 c42:	41 e0       	ldi	r20, 0x01	; 1
 c44:	65 e0       	ldi	r22, 0x05	; 5
 c46:	81 e0       	ldi	r24, 0x01	; 1
 c48:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN6_ID,INPUT_PIN);
 c4c:	40 e0       	ldi	r20, 0x00	; 0
 c4e:	66 e0       	ldi	r22, 0x06	; 6
 c50:	81 e0       	ldi	r24, 0x01	; 1
 c52:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORTB_ID,PIN7_ID,OUTPUT_PIN);
 c56:	41 e0       	ldi	r20, 0x01	; 1
 c58:	67 e0       	ldi	r22, 0x07	; 7
 c5a:	81 e0       	ldi	r24, 0x01	; 1
 c5c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
	
	/*set data order to LSB first*/
	SET_BIT(SPCR,DORD);
 c60:	8d b1       	in	r24, 0x0d	; 13
 c62:	80 62       	ori	r24, 0x20	; 32
 c64:	8d b9       	out	0x0d, r24	; 13
	
	/*Set as master*/
	SET_BIT(SPCR,MSTR);
 c66:	8d b1       	in	r24, 0x0d	; 13
 c68:	80 61       	ori	r24, 0x10	; 16
 c6a:	8d b9       	out	0x0d, r24	; 13
	
	/*Clear clk POL and PHASE*/
	CLEAR_BIT(SPCR,CPOL);
 c6c:	8d b1       	in	r24, 0x0d	; 13
 c6e:	87 7f       	andi	r24, 0xF7	; 247
 c70:	8d b9       	out	0x0d, r24	; 13
	CLEAR_BIT(SPCR,CPHA);
 c72:	8d b1       	in	r24, 0x0d	; 13
 c74:	8b 7f       	andi	r24, 0xFB	; 251
 c76:	8d b9       	out	0x0d, r24	; 13
	
	/*set prescaler*/
	SET_BIT(SPCR,SPR0);
 c78:	8d b1       	in	r24, 0x0d	; 13
 c7a:	81 60       	ori	r24, 0x01	; 1
 c7c:	8d b9       	out	0x0d, r24	; 13
	
#if(SPI_SPEED == NORMAL_SPEED)
	CLEAR_BIT(SPSR,SPI2X);
 c7e:	8e b1       	in	r24, 0x0e	; 14
 c80:	8e 7f       	andi	r24, 0xFE	; 254
 c82:	8e b9       	out	0x0e, r24	; 14
#elif(SPI_SPEED == DOUBLE_SPEED)
	SET_BIT(SPSR,SPI2X);
#endif

	/*enable SPI*/
	SET_BIT(SPCR,SPE);	
 c84:	8d b1       	in	r24, 0x0d	; 13
 c86:	80 64       	ori	r24, 0x40	; 64
 c88:	8d b9       	out	0x0d, r24	; 13
 c8a:	08 95       	ret

00000c8c <SPI_send>:
}

void SPI_send(uint8 value)
{
	SPDR = value;
 c8c:	8f b9       	out	0x0f, r24	; 15
 c8e:	08 95       	ret

00000c90 <TIMER0_PWM_init>:
void TIMER0_deinit(void)
{
	/*Stop Timer*/
	CLEAR_BIT(TCCR0,CS00);
	CLEAR_BIT(TCCR0,CS01);
	CLEAR_BIT(TCCR0,CS02);
 c90:	83 b7       	in	r24, 0x33	; 51
 c92:	80 64       	ori	r24, 0x40	; 64
 c94:	83 bf       	out	0x33, r24	; 51
 c96:	83 b7       	in	r24, 0x33	; 51
 c98:	88 60       	ori	r24, 0x08	; 8
 c9a:	83 bf       	out	0x33, r24	; 51
 c9c:	83 b7       	in	r24, 0x33	; 51
 c9e:	8f 7e       	andi	r24, 0xEF	; 239
 ca0:	83 bf       	out	0x33, r24	; 51
 ca2:	83 b7       	in	r24, 0x33	; 51
 ca4:	80 62       	ori	r24, 0x20	; 32
 ca6:	83 bf       	out	0x33, r24	; 51
 ca8:	83 b7       	in	r24, 0x33	; 51
 caa:	8e 7f       	andi	r24, 0xFE	; 254
 cac:	83 bf       	out	0x33, r24	; 51
 cae:	83 b7       	in	r24, 0x33	; 51
 cb0:	82 60       	ori	r24, 0x02	; 2
 cb2:	83 bf       	out	0x33, r24	; 51
 cb4:	83 b7       	in	r24, 0x33	; 51
 cb6:	8b 7f       	andi	r24, 0xFB	; 251
 cb8:	83 bf       	out	0x33, r24	; 51
 cba:	12 be       	out	0x32, r1	; 50
 cbc:	08 95       	ret

00000cbe <set_OCR>:
 cbe:	8c bf       	out	0x3c, r24	; 60
 cc0:	08 95       	ret

00000cc2 <__vector_11>:
}
/*Timer 0 overflow ISR*/
void __vector_11()__attribute__((signal));
void __vector_11()
{
 cc2:	1f 92       	push	r1
 cc4:	0f 92       	push	r0
 cc6:	0f b6       	in	r0, 0x3f	; 63
 cc8:	0f 92       	push	r0
 cca:	11 24       	eor	r1, r1
 ccc:	2f 93       	push	r18
 cce:	3f 93       	push	r19
 cd0:	4f 93       	push	r20
 cd2:	5f 93       	push	r21
 cd4:	6f 93       	push	r22
 cd6:	7f 93       	push	r23
 cd8:	8f 93       	push	r24
 cda:	9f 93       	push	r25
 cdc:	af 93       	push	r26
 cde:	bf 93       	push	r27
 ce0:	ef 93       	push	r30
 ce2:	ff 93       	push	r31
	TIMER0_OVF_ptr();
 ce4:	e0 91 a3 00 	lds	r30, 0x00A3	; 0x8000a3 <TIMER0_OVF_ptr>
 ce8:	f0 91 a4 00 	lds	r31, 0x00A4	; 0x8000a4 <TIMER0_OVF_ptr+0x1>
 cec:	09 95       	icall
}
 cee:	ff 91       	pop	r31
 cf0:	ef 91       	pop	r30
 cf2:	bf 91       	pop	r27
 cf4:	af 91       	pop	r26
 cf6:	9f 91       	pop	r25
 cf8:	8f 91       	pop	r24
 cfa:	7f 91       	pop	r23
 cfc:	6f 91       	pop	r22
 cfe:	5f 91       	pop	r21
 d00:	4f 91       	pop	r20
 d02:	3f 91       	pop	r19
 d04:	2f 91       	pop	r18
 d06:	0f 90       	pop	r0
 d08:	0f be       	out	0x3f, r0	; 63
 d0a:	0f 90       	pop	r0
 d0c:	1f 90       	pop	r1
 d0e:	18 95       	reti

00000d10 <__vector_10>:

/*Timer 0 compare ISR*/
void __vector_10()__attribute__((signal));
void __vector_10()
{
 d10:	1f 92       	push	r1
 d12:	0f 92       	push	r0
 d14:	0f b6       	in	r0, 0x3f	; 63
 d16:	0f 92       	push	r0
 d18:	11 24       	eor	r1, r1
 d1a:	2f 93       	push	r18
 d1c:	3f 93       	push	r19
 d1e:	4f 93       	push	r20
 d20:	5f 93       	push	r21
 d22:	6f 93       	push	r22
 d24:	7f 93       	push	r23
 d26:	8f 93       	push	r24
 d28:	9f 93       	push	r25
 d2a:	af 93       	push	r26
 d2c:	bf 93       	push	r27
 d2e:	ef 93       	push	r30
 d30:	ff 93       	push	r31
	TIMER0_CMP_ptr();
 d32:	e0 91 a5 00 	lds	r30, 0x00A5	; 0x8000a5 <TIMER0_CMP_ptr>
 d36:	f0 91 a6 00 	lds	r31, 0x00A6	; 0x8000a6 <TIMER0_CMP_ptr+0x1>
 d3a:	09 95       	icall
}
 d3c:	ff 91       	pop	r31
 d3e:	ef 91       	pop	r30
 d40:	bf 91       	pop	r27
 d42:	af 91       	pop	r26
 d44:	9f 91       	pop	r25
 d46:	8f 91       	pop	r24
 d48:	7f 91       	pop	r23
 d4a:	6f 91       	pop	r22
 d4c:	5f 91       	pop	r21
 d4e:	4f 91       	pop	r20
 d50:	3f 91       	pop	r19
 d52:	2f 91       	pop	r18
 d54:	0f 90       	pop	r0
 d56:	0f be       	out	0x3f, r0	; 63
 d58:	0f 90       	pop	r0
 d5a:	1f 90       	pop	r1
 d5c:	18 95       	reti

00000d5e <UART_init>:

void UART_receive(uint8* value)
{
	while(!GET_BIT(UCSRA,RXC)){}
	*value = UDR;
	SET_BIT(UCSRA,RXC);
 d5e:	87 e6       	ldi	r24, 0x67	; 103
 d60:	89 b9       	out	0x09, r24	; 9
 d62:	41 e0       	ldi	r20, 0x01	; 1
 d64:	61 e0       	ldi	r22, 0x01	; 1
 d66:	83 e0       	ldi	r24, 0x03	; 3
 d68:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 d6c:	40 e0       	ldi	r20, 0x00	; 0
 d6e:	60 e0       	ldi	r22, 0x00	; 0
 d70:	83 e0       	ldi	r24, 0x03	; 3
 d72:	0e 94 ff 03 	call	0x7fe	; 0x7fe <DIO_voidSetPinDirection>
 d76:	8b b1       	in	r24, 0x0b	; 11
 d78:	8d 7f       	andi	r24, 0xFD	; 253
 d7a:	8b b9       	out	0x0b, r24	; 11
 d7c:	8a b1       	in	r24, 0x0a	; 10
 d7e:	80 61       	ori	r24, 0x10	; 16
 d80:	8a b9       	out	0x0a, r24	; 10
 d82:	8a b1       	in	r24, 0x0a	; 10
 d84:	88 60       	ori	r24, 0x08	; 8
 d86:	8a b9       	out	0x0a, r24	; 10
 d88:	8a b1       	in	r24, 0x0a	; 10
 d8a:	8b 7f       	andi	r24, 0xFB	; 251
 d8c:	8a b9       	out	0x0a, r24	; 10
 d8e:	86 e8       	ldi	r24, 0x86	; 134
 d90:	80 bd       	out	0x20, r24	; 32
 d92:	1b b8       	out	0x0b, r1	; 11
 d94:	8a b1       	in	r24, 0x0a	; 10
 d96:	80 68       	ori	r24, 0x80	; 128
 d98:	8a b9       	out	0x0a, r24	; 10
 d9a:	08 95       	ret

00000d9c <UART_transmit>:
}

void UART_transmit(uint8 value)
{
	while(!GET_BIT(UCSRA,UDRE)){}
 d9c:	5d 9b       	sbis	0x0b, 5	; 11
 d9e:	fe cf       	rjmp	.-4      	; 0xd9c <UART_transmit>
	UDR = value;
 da0:	8c b9       	out	0x0c, r24	; 12
	SET_BIT(UCSRA,UDRE);
 da2:	8b b1       	in	r24, 0x0b	; 11
 da4:	80 62       	ori	r24, 0x20	; 32
 da6:	8b b9       	out	0x0b, r24	; 11
 da8:	08 95       	ret

00000daa <UART_INT_receive>:
}

void UART_INT_receive(uint8* value)
{
	*value = UDR;
 daa:	2c b1       	in	r18, 0x0c	; 12
 dac:	fc 01       	movw	r30, r24
 dae:	20 83       	st	Z, r18
 db0:	08 95       	ret

00000db2 <UART_callback>:
void (*UART_ptr)(void);


void UART_callback(void (*ptr)(void))
{
	UART_ptr = ptr;
 db2:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <UART_ptr+0x1>
 db6:	80 93 a7 00 	sts	0x00A7, r24	; 0x8000a7 <UART_ptr>
 dba:	08 95       	ret

00000dbc <__vector_13>:
}

void __vector_13()__attribute__((signal));
void __vector_13()
{
 dbc:	1f 92       	push	r1
 dbe:	0f 92       	push	r0
 dc0:	0f b6       	in	r0, 0x3f	; 63
 dc2:	0f 92       	push	r0
 dc4:	11 24       	eor	r1, r1
 dc6:	2f 93       	push	r18
 dc8:	3f 93       	push	r19
 dca:	4f 93       	push	r20
 dcc:	5f 93       	push	r21
 dce:	6f 93       	push	r22
 dd0:	7f 93       	push	r23
 dd2:	8f 93       	push	r24
 dd4:	9f 93       	push	r25
 dd6:	af 93       	push	r26
 dd8:	bf 93       	push	r27
 dda:	ef 93       	push	r30
 ddc:	ff 93       	push	r31
	UART_ptr();
 dde:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <UART_ptr>
 de2:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <UART_ptr+0x1>
 de6:	09 95       	icall
}
 de8:	ff 91       	pop	r31
 dea:	ef 91       	pop	r30
 dec:	bf 91       	pop	r27
 dee:	af 91       	pop	r26
 df0:	9f 91       	pop	r25
 df2:	8f 91       	pop	r24
 df4:	7f 91       	pop	r23
 df6:	6f 91       	pop	r22
 df8:	5f 91       	pop	r21
 dfa:	4f 91       	pop	r20
 dfc:	3f 91       	pop	r19
 dfe:	2f 91       	pop	r18
 e00:	0f 90       	pop	r0
 e02:	0f be       	out	0x3f, r0	; 63
 e04:	0f 90       	pop	r0
 e06:	1f 90       	pop	r1
 e08:	18 95       	reti

00000e0a <__udivmodsi4>:
 e0a:	a1 e2       	ldi	r26, 0x21	; 33
 e0c:	1a 2e       	mov	r1, r26
 e0e:	aa 1b       	sub	r26, r26
 e10:	bb 1b       	sub	r27, r27
 e12:	fd 01       	movw	r30, r26
 e14:	0d c0       	rjmp	.+26     	; 0xe30 <__udivmodsi4_ep>

00000e16 <__udivmodsi4_loop>:
 e16:	aa 1f       	adc	r26, r26
 e18:	bb 1f       	adc	r27, r27
 e1a:	ee 1f       	adc	r30, r30
 e1c:	ff 1f       	adc	r31, r31
 e1e:	a2 17       	cp	r26, r18
 e20:	b3 07       	cpc	r27, r19
 e22:	e4 07       	cpc	r30, r20
 e24:	f5 07       	cpc	r31, r21
 e26:	20 f0       	brcs	.+8      	; 0xe30 <__udivmodsi4_ep>
 e28:	a2 1b       	sub	r26, r18
 e2a:	b3 0b       	sbc	r27, r19
 e2c:	e4 0b       	sbc	r30, r20
 e2e:	f5 0b       	sbc	r31, r21

00000e30 <__udivmodsi4_ep>:
 e30:	66 1f       	adc	r22, r22
 e32:	77 1f       	adc	r23, r23
 e34:	88 1f       	adc	r24, r24
 e36:	99 1f       	adc	r25, r25
 e38:	1a 94       	dec	r1
 e3a:	69 f7       	brne	.-38     	; 0xe16 <__udivmodsi4_loop>
 e3c:	60 95       	com	r22
 e3e:	70 95       	com	r23
 e40:	80 95       	com	r24
 e42:	90 95       	com	r25
 e44:	9b 01       	movw	r18, r22
 e46:	ac 01       	movw	r20, r24
 e48:	bd 01       	movw	r22, r26
 e4a:	cf 01       	movw	r24, r30
 e4c:	08 95       	ret

00000e4e <__umulhisi3>:
 e4e:	a2 9f       	mul	r26, r18
 e50:	b0 01       	movw	r22, r0
 e52:	b3 9f       	mul	r27, r19
 e54:	c0 01       	movw	r24, r0
 e56:	a3 9f       	mul	r26, r19
 e58:	70 0d       	add	r23, r0
 e5a:	81 1d       	adc	r24, r1
 e5c:	11 24       	eor	r1, r1
 e5e:	91 1d       	adc	r25, r1
 e60:	b2 9f       	mul	r27, r18
 e62:	70 0d       	add	r23, r0
 e64:	81 1d       	adc	r24, r1
 e66:	11 24       	eor	r1, r1
 e68:	91 1d       	adc	r25, r1
 e6a:	08 95       	ret

00000e6c <itoa>:
 e6c:	45 32       	cpi	r20, 0x25	; 37
 e6e:	51 05       	cpc	r21, r1
 e70:	20 f4       	brcc	.+8      	; 0xe7a <itoa+0xe>
 e72:	42 30       	cpi	r20, 0x02	; 2
 e74:	10 f0       	brcs	.+4      	; 0xe7a <itoa+0xe>
 e76:	0c 94 41 07 	jmp	0xe82	; 0xe82 <__itoa_ncheck>
 e7a:	fb 01       	movw	r30, r22
 e7c:	10 82       	st	Z, r1
 e7e:	cb 01       	movw	r24, r22
 e80:	08 95       	ret

00000e82 <__itoa_ncheck>:
 e82:	bb 27       	eor	r27, r27
 e84:	4a 30       	cpi	r20, 0x0A	; 10
 e86:	31 f4       	brne	.+12     	; 0xe94 <__itoa_ncheck+0x12>
 e88:	99 23       	and	r25, r25
 e8a:	22 f4       	brpl	.+8      	; 0xe94 <__itoa_ncheck+0x12>
 e8c:	bd e2       	ldi	r27, 0x2D	; 45
 e8e:	90 95       	com	r25
 e90:	81 95       	neg	r24
 e92:	9f 4f       	sbci	r25, 0xFF	; 255
 e94:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__utoa_common>

00000e98 <__utoa_ncheck>:
 e98:	bb 27       	eor	r27, r27

00000e9a <__utoa_common>:
 e9a:	fb 01       	movw	r30, r22
 e9c:	55 27       	eor	r21, r21
 e9e:	aa 27       	eor	r26, r26
 ea0:	88 0f       	add	r24, r24
 ea2:	99 1f       	adc	r25, r25
 ea4:	aa 1f       	adc	r26, r26
 ea6:	a4 17       	cp	r26, r20
 ea8:	10 f0       	brcs	.+4      	; 0xeae <__utoa_common+0x14>
 eaa:	a4 1b       	sub	r26, r20
 eac:	83 95       	inc	r24
 eae:	50 51       	subi	r21, 0x10	; 16
 eb0:	b9 f7       	brne	.-18     	; 0xea0 <__utoa_common+0x6>
 eb2:	a0 5d       	subi	r26, 0xD0	; 208
 eb4:	aa 33       	cpi	r26, 0x3A	; 58
 eb6:	08 f0       	brcs	.+2      	; 0xeba <__utoa_common+0x20>
 eb8:	a9 5d       	subi	r26, 0xD9	; 217
 eba:	a1 93       	st	Z+, r26
 ebc:	00 97       	sbiw	r24, 0x00	; 0
 ebe:	79 f7       	brne	.-34     	; 0xe9e <__utoa_common+0x4>
 ec0:	b1 11       	cpse	r27, r1
 ec2:	b1 93       	st	Z+, r27
 ec4:	11 92       	st	Z+, r1
 ec6:	cb 01       	movw	r24, r22
 ec8:	0c 94 66 07 	jmp	0xecc	; 0xecc <strrev>

00000ecc <strrev>:
 ecc:	dc 01       	movw	r26, r24
 ece:	fc 01       	movw	r30, r24
 ed0:	67 2f       	mov	r22, r23
 ed2:	71 91       	ld	r23, Z+
 ed4:	77 23       	and	r23, r23
 ed6:	e1 f7       	brne	.-8      	; 0xed0 <strrev+0x4>
 ed8:	32 97       	sbiw	r30, 0x02	; 2
 eda:	04 c0       	rjmp	.+8      	; 0xee4 <strrev+0x18>
 edc:	7c 91       	ld	r23, X
 ede:	6d 93       	st	X+, r22
 ee0:	70 83       	st	Z, r23
 ee2:	62 91       	ld	r22, -Z
 ee4:	ae 17       	cp	r26, r30
 ee6:	bf 07       	cpc	r27, r31
 ee8:	c8 f3       	brcs	.-14     	; 0xedc <strrev+0x10>
 eea:	08 95       	ret

00000eec <_exit>:
 eec:	f8 94       	cli

00000eee <__stop_program>:
 eee:	ff cf       	rjmp	.-2      	; 0xeee <__stop_program>
