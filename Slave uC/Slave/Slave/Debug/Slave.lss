
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000746  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080007a  0080007a  000007f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001716  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f2  00000000  00000000  0000206e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab7  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00003418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ed  00000000  00000000  000035d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab0  00000000  00000000  00003bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000466d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e4       	ldi	r30, 0x46	; 70
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a1 03 	jmp	0x742	; 0x742 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main(void)
{	
		/*ALL INITS*/
	LCD_init();
  92:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_init>
	SPI_init();
  96:	0e 94 31 03 	call	0x662	; 0x662 <SPI_init>
	
	/*LCD initial display*/
	LCD_moveCursor(0,0);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 22 02 	call	0x444	; 0x444 <LCD_moveCursor>
	LCD_displayString("FLAME:  ");
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_displayString>
				
	LCD_moveCursor(1,0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	0e 94 22 02 	call	0x444	; 0x444 <LCD_moveCursor>
	LCD_displayString("GAS:  ");
  b2:	89 e6       	ldi	r24, 0x69	; 105
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_displayString>
	
	LCD_moveCursor(2,4);
  ba:	64 e0       	ldi	r22, 0x04	; 4
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 22 02 	call	0x444	; 0x444 <LCD_moveCursor>
	LCD_displayString("TEMP:   C");
  c2:	80 e7       	ldi	r24, 0x70	; 112
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_displayString>
	
	while(1)
	{
		/*Saving Data Mode*/
		for(uint8 i=0; i<3; i++)
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <main+0x56>
		{
			SPI_receive(&data_arr[i]);
  ce:	8c 2f       	mov	r24, r28
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	86 58       	subi	r24, 0x86	; 134
  d4:	9f 4f       	sbci	r25, 0xFF	; 255
  d6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <SPI_receive>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e3       	ldi	r24, 0x3F	; 63
  dc:	9c e9       	ldi	r25, 0x9C	; 156
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x52>
  e4:	00 00       	nop
	LCD_displayString("TEMP:   C");
	
	while(1)
	{
		/*Saving Data Mode*/
		for(uint8 i=0; i<3; i++)
  e6:	cf 5f       	subi	r28, 0xFF	; 255
  e8:	c3 30       	cpi	r28, 0x03	; 3
  ea:	88 f3       	brcs	.-30     	; 0xce <main+0x3c>
		{
			SPI_receive(&data_arr[i]);
			_delay_ms(10);
		}
		LCD_moveCursor(0,8);
  ec:	68 e0       	ldi	r22, 0x08	; 8
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 22 02 	call	0x444	; 0x444 <LCD_moveCursor>
		LCD_intgerToString(data_arr[0]);
  f4:	ca e7       	ldi	r28, 0x7A	; 122
  f6:	d0 e0       	ldi	r29, 0x00	; 0
  f8:	88 81       	ld	r24, Y
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 39 02 	call	0x472	; 0x472 <LCD_intgerToString>
		
		LCD_moveCursor(1,6);
 100:	66 e0       	ldi	r22, 0x06	; 6
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	0e 94 22 02 	call	0x444	; 0x444 <LCD_moveCursor>
		LCD_intgerToString(data_arr[1]);
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_intgerToString>
		
		LCD_moveCursor(2,10);
 110:	6a e0       	ldi	r22, 0x0A	; 10
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 22 02 	call	0x444	; 0x444 <LCD_moveCursor>
		LCD_intgerToString(data_arr[2]);
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 39 02 	call	0x472	; 0x472 <LCD_intgerToString>
	}
 120:	d4 cf       	rjmp	.-88     	; 0xca <main+0x38>

00000122 <LCD_sendCommand>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
	LCD_moveCursor(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	63 e0       	ldi	r22, 0x03	; 3
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 130:	8f e9       	ldi	r24, 0x9F	; 159
 132:	9f e0       	ldi	r25, 0x0F	; 15
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_sendCommand+0x12>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_sendCommand+0x18>
 13a:	00 00       	nop
 13c:	41 e0       	ldi	r20, 0x01	; 1
 13e:	62 e0       	ldi	r22, 0x02	; 2
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 146:	8f e9       	ldi	r24, 0x9F	; 159
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <LCD_sendCommand+0x28>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_sendCommand+0x2e>
 150:	00 00       	nop
 152:	4c 2f       	mov	r20, r28
 154:	40 71       	andi	r20, 0x10	; 16
 156:	50 e0       	ldi	r21, 0x00	; 0
 158:	55 95       	asr	r21
 15a:	47 95       	ror	r20
 15c:	55 95       	asr	r21
 15e:	47 95       	ror	r20
 160:	55 95       	asr	r21
 162:	47 95       	ror	r20
 164:	55 95       	asr	r21
 166:	47 95       	ror	r20
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	82 e0       	ldi	r24, 0x02	; 2
 16c:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 170:	4c 2f       	mov	r20, r28
 172:	40 72       	andi	r20, 0x20	; 32
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	55 95       	asr	r21
 178:	47 95       	ror	r20
 17a:	55 95       	asr	r21
 17c:	47 95       	ror	r20
 17e:	55 95       	asr	r21
 180:	47 95       	ror	r20
 182:	55 95       	asr	r21
 184:	47 95       	ror	r20
 186:	55 95       	asr	r21
 188:	47 95       	ror	r20
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 192:	4c 2f       	mov	r20, r28
 194:	40 74       	andi	r20, 0x40	; 64
 196:	50 e0       	ldi	r21, 0x00	; 0
 198:	04 2e       	mov	r0, r20
 19a:	45 2f       	mov	r20, r21
 19c:	00 0c       	add	r0, r0
 19e:	44 1f       	adc	r20, r20
 1a0:	55 0b       	sbc	r21, r21
 1a2:	00 0c       	add	r0, r0
 1a4:	44 1f       	adc	r20, r20
 1a6:	55 1f       	adc	r21, r21
 1a8:	62 e0       	ldi	r22, 0x02	; 2
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 1b0:	4c 2f       	mov	r20, r28
 1b2:	44 1f       	adc	r20, r20
 1b4:	44 27       	eor	r20, r20
 1b6:	44 1f       	adc	r20, r20
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 1c0:	8f e9       	ldi	r24, 0x9F	; 159
 1c2:	9f e0       	ldi	r25, 0x0F	; 15
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <LCD_sendCommand+0xa2>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <LCD_sendCommand+0xa8>
 1ca:	00 00       	nop
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 1d6:	8f e9       	ldi	r24, 0x9F	; 159
 1d8:	9f e0       	ldi	r25, 0x0F	; 15
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	f1 f7       	brne	.-4      	; 0x1da <LCD_sendCommand+0xb8>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <LCD_sendCommand+0xbe>
 1e0:	00 00       	nop
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 1ec:	8f e9       	ldi	r24, 0x9F	; 159
 1ee:	9f e0       	ldi	r25, 0x0F	; 15
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <LCD_sendCommand+0xce>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_sendCommand+0xd4>
 1f6:	00 00       	nop
 1f8:	4c 2f       	mov	r20, r28
 1fa:	41 70       	andi	r20, 0x01	; 1
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 204:	4c 2f       	mov	r20, r28
 206:	42 70       	andi	r20, 0x02	; 2
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	55 95       	asr	r21
 20c:	47 95       	ror	r20
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 216:	4c 2f       	mov	r20, r28
 218:	44 70       	andi	r20, 0x04	; 4
 21a:	50 e0       	ldi	r21, 0x00	; 0
 21c:	55 95       	asr	r21
 21e:	47 95       	ror	r20
 220:	55 95       	asr	r21
 222:	47 95       	ror	r20
 224:	62 e0       	ldi	r22, 0x02	; 2
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 22c:	c8 70       	andi	r28, 0x08	; 8
 22e:	4c 2f       	mov	r20, r28
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	55 95       	asr	r21
 234:	47 95       	ror	r20
 236:	55 95       	asr	r21
 238:	47 95       	ror	r20
 23a:	55 95       	asr	r21
 23c:	47 95       	ror	r20
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	82 e0       	ldi	r24, 0x02	; 2
 242:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 246:	8f e9       	ldi	r24, 0x9F	; 159
 248:	9f e0       	ldi	r25, 0x0F	; 15
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_sendCommand+0x128>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_sendCommand+0x12e>
 250:	00 00       	nop
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 25c:	8f e9       	ldi	r24, 0x9F	; 159
 25e:	9f e0       	ldi	r25, 0x0F	; 15
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <LCD_sendCommand+0x13e>
 264:	00 c0       	rjmp	.+0      	; 0x266 <LCD_sendCommand+0x144>
 266:	00 00       	nop
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <LCD_init>:
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	63 e0       	ldi	r22, 0x03	; 3
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 276:	41 e0       	ldi	r20, 0x01	; 1
 278:	62 e0       	ldi	r22, 0x02	; 2
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	89 ef       	ldi	r24, 0xF9	; 249
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	21 50       	subi	r18, 0x01	; 1
 288:	80 40       	sbci	r24, 0x00	; 0
 28a:	90 40       	sbci	r25, 0x00	; 0
 28c:	e1 f7       	brne	.-8      	; 0x286 <LCD_init+0x1a>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_init+0x24>
 290:	00 00       	nop
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	82 e0       	ldi	r24, 0x02	; 2
 2a2:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	63 e0       	ldi	r22, 0x03	; 3
 2b4:	82 e0       	ldi	r24, 0x02	; 2
 2b6:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 2ba:	83 e3       	ldi	r24, 0x33	; 51
 2bc:	0e 94 91 00 	call	0x122	; 0x122 <LCD_sendCommand>
 2c0:	82 e3       	ldi	r24, 0x32	; 50
 2c2:	0e 94 91 00 	call	0x122	; 0x122 <LCD_sendCommand>
 2c6:	88 e2       	ldi	r24, 0x28	; 40
 2c8:	0e 94 91 00 	call	0x122	; 0x122 <LCD_sendCommand>
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	0e 94 91 00 	call	0x122	; 0x122 <LCD_sendCommand>
 2d2:	8c e0       	ldi	r24, 0x0C	; 12
 2d4:	0e 94 91 00 	call	0x122	; 0x122 <LCD_sendCommand>
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 91 00 	call	0x122	; 0x122 <LCD_sendCommand>
 2de:	08 95       	ret

000002e0 <LCD_displayCharacter>:
 2e0:	cf 93       	push	r28
 2e2:	c8 2f       	mov	r28, r24
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 2ee:	8f e9       	ldi	r24, 0x9F	; 159
 2f0:	9f e0       	ldi	r25, 0x0F	; 15
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <LCD_displayCharacter+0x12>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <LCD_displayCharacter+0x18>
 2f8:	00 00       	nop
 2fa:	41 e0       	ldi	r20, 0x01	; 1
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 304:	8f e9       	ldi	r24, 0x9F	; 159
 306:	9f e0       	ldi	r25, 0x0F	; 15
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_displayCharacter+0x28>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_displayCharacter+0x2e>
 30e:	00 00       	nop
 310:	4c 2f       	mov	r20, r28
 312:	40 71       	andi	r20, 0x10	; 16
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	55 95       	asr	r21
 318:	47 95       	ror	r20
 31a:	55 95       	asr	r21
 31c:	47 95       	ror	r20
 31e:	55 95       	asr	r21
 320:	47 95       	ror	r20
 322:	55 95       	asr	r21
 324:	47 95       	ror	r20
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 32e:	4c 2f       	mov	r20, r28
 330:	40 72       	andi	r20, 0x20	; 32
 332:	50 e0       	ldi	r21, 0x00	; 0
 334:	55 95       	asr	r21
 336:	47 95       	ror	r20
 338:	55 95       	asr	r21
 33a:	47 95       	ror	r20
 33c:	55 95       	asr	r21
 33e:	47 95       	ror	r20
 340:	55 95       	asr	r21
 342:	47 95       	ror	r20
 344:	55 95       	asr	r21
 346:	47 95       	ror	r20
 348:	61 e0       	ldi	r22, 0x01	; 1
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 350:	4c 2f       	mov	r20, r28
 352:	40 74       	andi	r20, 0x40	; 64
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	04 2e       	mov	r0, r20
 358:	45 2f       	mov	r20, r21
 35a:	00 0c       	add	r0, r0
 35c:	44 1f       	adc	r20, r20
 35e:	55 0b       	sbc	r21, r21
 360:	00 0c       	add	r0, r0
 362:	44 1f       	adc	r20, r20
 364:	55 1f       	adc	r21, r21
 366:	62 e0       	ldi	r22, 0x02	; 2
 368:	82 e0       	ldi	r24, 0x02	; 2
 36a:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 36e:	4c 2f       	mov	r20, r28
 370:	44 1f       	adc	r20, r20
 372:	44 27       	eor	r20, r20
 374:	44 1f       	adc	r20, r20
 376:	63 e0       	ldi	r22, 0x03	; 3
 378:	82 e0       	ldi	r24, 0x02	; 2
 37a:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 37e:	8f e9       	ldi	r24, 0x9F	; 159
 380:	9f e0       	ldi	r25, 0x0F	; 15
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <LCD_displayCharacter+0xa2>
 386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_displayCharacter+0xa8>
 388:	00 00       	nop
 38a:	40 e0       	ldi	r20, 0x00	; 0
 38c:	62 e0       	ldi	r22, 0x02	; 2
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 394:	8f e9       	ldi	r24, 0x9F	; 159
 396:	9f e0       	ldi	r25, 0x0F	; 15
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <LCD_displayCharacter+0xb8>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <LCD_displayCharacter+0xbe>
 39e:	00 00       	nop
 3a0:	41 e0       	ldi	r20, 0x01	; 1
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 3aa:	8f e9       	ldi	r24, 0x9F	; 159
 3ac:	9f e0       	ldi	r25, 0x0F	; 15
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <LCD_displayCharacter+0xce>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LCD_displayCharacter+0xd4>
 3b4:	00 00       	nop
 3b6:	4c 2f       	mov	r20, r28
 3b8:	41 70       	andi	r20, 0x01	; 1
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 3c2:	4c 2f       	mov	r20, r28
 3c4:	42 70       	andi	r20, 0x02	; 2
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	55 95       	asr	r21
 3ca:	47 95       	ror	r20
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 3d4:	4c 2f       	mov	r20, r28
 3d6:	44 70       	andi	r20, 0x04	; 4
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	55 95       	asr	r21
 3dc:	47 95       	ror	r20
 3de:	55 95       	asr	r21
 3e0:	47 95       	ror	r20
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 3ea:	c8 70       	andi	r28, 0x08	; 8
 3ec:	4c 2f       	mov	r20, r28
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	55 95       	asr	r21
 3f6:	47 95       	ror	r20
 3f8:	55 95       	asr	r21
 3fa:	47 95       	ror	r20
 3fc:	63 e0       	ldi	r22, 0x03	; 3
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 404:	8f e9       	ldi	r24, 0x9F	; 159
 406:	9f e0       	ldi	r25, 0x0F	; 15
 408:	01 97       	sbiw	r24, 0x01	; 1
 40a:	f1 f7       	brne	.-4      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	40 e0       	ldi	r20, 0x00	; 0
 412:	62 e0       	ldi	r22, 0x02	; 2
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_voidSetPinValue>
 41a:	8f e9       	ldi	r24, 0x9F	; 159
 41c:	9f e0       	ldi	r25, 0x0F	; 15
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 424:	00 00       	nop
 426:	cf 91       	pop	r28
 428:	08 95       	ret

0000042a <LCD_displayString>:
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	ec 01       	movw	r28, r24
 430:	03 c0       	rjmp	.+6      	; 0x438 <LCD_displayString+0xe>
 432:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_displayCharacter>
 436:	21 96       	adiw	r28, 0x01	; 1
 438:	88 81       	ld	r24, Y
 43a:	81 11       	cpse	r24, r1
 43c:	fa cf       	rjmp	.-12     	; 0x432 <LCD_displayString+0x8>
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <LCD_moveCursor>:
 444:	81 30       	cpi	r24, 0x01	; 1
 446:	31 f0       	breq	.+12     	; 0x454 <LCD_moveCursor+0x10>
 448:	70 f0       	brcs	.+28     	; 0x466 <LCD_moveCursor+0x22>
 44a:	82 30       	cpi	r24, 0x02	; 2
 44c:	31 f0       	breq	.+12     	; 0x45a <LCD_moveCursor+0x16>
 44e:	83 30       	cpi	r24, 0x03	; 3
 450:	39 f0       	breq	.+14     	; 0x460 <LCD_moveCursor+0x1c>
 452:	0a c0       	rjmp	.+20     	; 0x468 <LCD_moveCursor+0x24>
 454:	90 e4       	ldi	r25, 0x40	; 64
 456:	96 0f       	add	r25, r22
 458:	07 c0       	rjmp	.+14     	; 0x468 <LCD_moveCursor+0x24>
 45a:	90 e1       	ldi	r25, 0x10	; 16
 45c:	96 0f       	add	r25, r22
 45e:	04 c0       	rjmp	.+8      	; 0x468 <LCD_moveCursor+0x24>
 460:	90 e5       	ldi	r25, 0x50	; 80
 462:	96 0f       	add	r25, r22
 464:	01 c0       	rjmp	.+2      	; 0x468 <LCD_moveCursor+0x24>
 466:	96 2f       	mov	r25, r22
 468:	89 2f       	mov	r24, r25
 46a:	80 68       	ori	r24, 0x80	; 128
 46c:	0e 94 91 00 	call	0x122	; 0x122 <LCD_sendCommand>
 470:	08 95       	ret

00000472 <LCD_intgerToString>:


void LCD_intgerToString(int data)
{
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	60 97       	sbiw	r28, 0x10	; 16
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	f8 94       	cli
 480:	de bf       	out	0x3e, r29	; 62
 482:	0f be       	out	0x3f, r0	; 63
 484:	cd bf       	out	0x3d, r28	; 61
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
 486:	4a e0       	ldi	r20, 0x0A	; 10
 488:	50 e0       	ldi	r21, 0x00	; 0
 48a:	be 01       	movw	r22, r28
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	0e 94 61 03 	call	0x6c2	; 0x6c2 <itoa>
	LCD_displayString(buff); /* Display the string */
 494:	ce 01       	movw	r24, r28
 496:	01 96       	adiw	r24, 0x01	; 1
 498:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_displayString>
}
 49c:	60 96       	adiw	r28, 0x10	; 16
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <DIO_voidSetPinDirection>:
	}
}

void DIO_voidSetPinDirection(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinDir)
{
	switch(copy_u8PortID)
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	01 f1       	breq	.+64     	; 0x4f2 <DIO_voidSetPinDirection+0x44>
 4b2:	30 f0       	brcs	.+12     	; 0x4c0 <DIO_voidSetPinDirection+0x12>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	b1 f1       	breq	.+108    	; 0x524 <DIO_voidSetPinDirection+0x76>
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	09 f4       	brne	.+2      	; 0x4be <DIO_voidSetPinDirection+0x10>
 4bc:	4c c0       	rjmp	.+152    	; 0x556 <DIO_voidSetPinDirection+0xa8>
 4be:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 4c0:	41 30       	cpi	r20, 0x01	; 1
 4c2:	59 f4       	brne	.+22     	; 0x4da <DIO_voidSetPinDirection+0x2c>
		{
			SET_BIT(DDRA,copy_u8PinID);
 4c4:	2a b3       	in	r18, 0x1a	; 26
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_voidSetPinDirection+0x22>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_voidSetPinDirection+0x1e>
 4d4:	82 2b       	or	r24, r18
 4d6:	8a bb       	out	0x1a, r24	; 26
 4d8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,copy_u8PinID);
 4da:	2a b3       	in	r18, 0x1a	; 26
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_voidSetPinDirection+0x38>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_voidSetPinDirection+0x34>
 4ea:	80 95       	com	r24
 4ec:	82 23       	and	r24, r18
 4ee:	8a bb       	out	0x1a, r24	; 26
 4f0:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 4f2:	41 30       	cpi	r20, 0x01	; 1
 4f4:	59 f4       	brne	.+22     	; 0x50c <DIO_voidSetPinDirection+0x5e>
		{
			SET_BIT(DDRB,copy_u8PinID);
 4f6:	27 b3       	in	r18, 0x17	; 23
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <DIO_voidSetPinDirection+0x54>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	6a 95       	dec	r22
 504:	e2 f7       	brpl	.-8      	; 0x4fe <DIO_voidSetPinDirection+0x50>
 506:	82 2b       	or	r24, r18
 508:	87 bb       	out	0x17, r24	; 23
 50a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,copy_u8PinID);
 50c:	27 b3       	in	r18, 0x17	; 23
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_voidSetPinDirection+0x6a>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_voidSetPinDirection+0x66>
 51c:	80 95       	com	r24
 51e:	82 23       	and	r24, r18
 520:	87 bb       	out	0x17, r24	; 23
 522:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	59 f4       	brne	.+22     	; 0x53e <DIO_voidSetPinDirection+0x90>
		{
			SET_BIT(DDRC,copy_u8PinID);
 528:	24 b3       	in	r18, 0x14	; 20
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_voidSetPinDirection+0x86>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_voidSetPinDirection+0x82>
 538:	82 2b       	or	r24, r18
 53a:	84 bb       	out	0x14, r24	; 20
 53c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,copy_u8PinID);
 53e:	24 b3       	in	r18, 0x14	; 20
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_voidSetPinDirection+0x9c>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_voidSetPinDirection+0x98>
 54e:	80 95       	com	r24
 550:	82 23       	and	r24, r18
 552:	84 bb       	out	0x14, r24	; 20
 554:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinDir == OUTPUT_PIN)
 556:	41 30       	cpi	r20, 0x01	; 1
 558:	59 f4       	brne	.+22     	; 0x570 <DIO_voidSetPinDirection+0xc2>
		{
			SET_BIT(DDRD,copy_u8PinID);
 55a:	21 b3       	in	r18, 0x11	; 17
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_voidSetPinDirection+0xb8>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_voidSetPinDirection+0xb4>
 56a:	82 2b       	or	r24, r18
 56c:	81 bb       	out	0x11, r24	; 17
 56e:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,copy_u8PinID);
 570:	21 b3       	in	r18, 0x11	; 17
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	02 c0       	rjmp	.+4      	; 0x57c <DIO_voidSetPinDirection+0xce>
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	6a 95       	dec	r22
 57e:	e2 f7       	brpl	.-8      	; 0x578 <DIO_voidSetPinDirection+0xca>
 580:	80 95       	com	r24
 582:	82 23       	and	r24, r18
 584:	81 bb       	out	0x11, r24	; 17
 586:	08 95       	ret

00000588 <DIO_voidSetPinValue>:
		
	}
}
void DIO_voidSetPinValue(uint8 copy_u8PortID,uint8 copy_u8PinID, uint8 copy_u8PinValue)
{
	switch(copy_u8PortID)
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	01 f1       	breq	.+64     	; 0x5cc <DIO_voidSetPinValue+0x44>
 58c:	30 f0       	brcs	.+12     	; 0x59a <DIO_voidSetPinValue+0x12>
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	b1 f1       	breq	.+108    	; 0x5fe <DIO_voidSetPinValue+0x76>
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	09 f4       	brne	.+2      	; 0x598 <DIO_voidSetPinValue+0x10>
 596:	4c c0       	rjmp	.+152    	; 0x630 <DIO_voidSetPinValue+0xa8>
 598:	08 95       	ret
	{
		case PORTA_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 59a:	41 30       	cpi	r20, 0x01	; 1
 59c:	59 f4       	brne	.+22     	; 0x5b4 <DIO_voidSetPinValue+0x2c>
		{
			SET_BIT(PORTA,copy_u8PinID);
 59e:	2b b3       	in	r18, 0x1b	; 27
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_voidSetPinValue+0x22>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_voidSetPinValue+0x1e>
 5ae:	82 2b       	or	r24, r18
 5b0:	8b bb       	out	0x1b, r24	; 27
 5b2:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,copy_u8PinID);
 5b4:	2b b3       	in	r18, 0x1b	; 27
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_voidSetPinValue+0x38>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_voidSetPinValue+0x34>
 5c4:	80 95       	com	r24
 5c6:	82 23       	and	r24, r18
 5c8:	8b bb       	out	0x1b, r24	; 27
 5ca:	08 95       	ret
		}
		break;
		
		case PORTB_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 5cc:	41 30       	cpi	r20, 0x01	; 1
 5ce:	59 f4       	brne	.+22     	; 0x5e6 <DIO_voidSetPinValue+0x5e>
		{
			SET_BIT(PORTB,copy_u8PinID);
 5d0:	28 b3       	in	r18, 0x18	; 24
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_voidSetPinValue+0x54>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_voidSetPinValue+0x50>
 5e0:	82 2b       	or	r24, r18
 5e2:	88 bb       	out	0x18, r24	; 24
 5e4:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,copy_u8PinID);
 5e6:	28 b3       	in	r18, 0x18	; 24
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_voidSetPinValue+0x6a>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_voidSetPinValue+0x66>
 5f6:	80 95       	com	r24
 5f8:	82 23       	and	r24, r18
 5fa:	88 bb       	out	0x18, r24	; 24
 5fc:	08 95       	ret
		}
		break;
		
		case PORTC_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 5fe:	41 30       	cpi	r20, 0x01	; 1
 600:	59 f4       	brne	.+22     	; 0x618 <DIO_voidSetPinValue+0x90>
		{
			SET_BIT(PORTC,copy_u8PinID);
 602:	25 b3       	in	r18, 0x15	; 21
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_voidSetPinValue+0x86>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_voidSetPinValue+0x82>
 612:	82 2b       	or	r24, r18
 614:	85 bb       	out	0x15, r24	; 21
 616:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,copy_u8PinID);
 618:	25 b3       	in	r18, 0x15	; 21
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_voidSetPinValue+0x9c>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_voidSetPinValue+0x98>
 628:	80 95       	com	r24
 62a:	82 23       	and	r24, r18
 62c:	85 bb       	out	0x15, r24	; 21
 62e:	08 95       	ret
		}
		break;
		
		case PORTD_ID:
		if(copy_u8PinValue == LOGIC_HIGH)
 630:	41 30       	cpi	r20, 0x01	; 1
 632:	59 f4       	brne	.+22     	; 0x64a <DIO_voidSetPinValue+0xc2>
		{
			SET_BIT(PORTD,copy_u8PinID);
 634:	22 b3       	in	r18, 0x12	; 18
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <DIO_voidSetPinValue+0xb8>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <DIO_voidSetPinValue+0xb4>
 644:	82 2b       	or	r24, r18
 646:	82 bb       	out	0x12, r24	; 18
 648:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,copy_u8PinID);
 64a:	22 b3       	in	r18, 0x12	; 18
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_voidSetPinValue+0xce>
 652:	88 0f       	add	r24, r24
 654:	99 1f       	adc	r25, r25
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_voidSetPinValue+0xca>
 65a:	80 95       	com	r24
 65c:	82 23       	and	r24, r18
 65e:	82 bb       	out	0x12, r24	; 18
 660:	08 95       	ret

00000662 <SPI_init>:
	SET_BIT(SPCR,SPE);	
}

void SPI_send(uint8 value)
{
	SPDR = value;
 662:	40 e0       	ldi	r20, 0x00	; 0
 664:	64 e0       	ldi	r22, 0x04	; 4
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 66c:	40 e0       	ldi	r20, 0x00	; 0
 66e:	65 e0       	ldi	r22, 0x05	; 5
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 676:	41 e0       	ldi	r20, 0x01	; 1
 678:	66 e0       	ldi	r22, 0x06	; 6
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	67 e0       	ldi	r22, 0x07	; 7
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	0e 94 57 02 	call	0x4ae	; 0x4ae <DIO_voidSetPinDirection>
 68a:	8d b1       	in	r24, 0x0d	; 13
 68c:	80 62       	ori	r24, 0x20	; 32
 68e:	8d b9       	out	0x0d, r24	; 13
 690:	8d b1       	in	r24, 0x0d	; 13
 692:	8f 7e       	andi	r24, 0xEF	; 239
 694:	8d b9       	out	0x0d, r24	; 13
 696:	8d b1       	in	r24, 0x0d	; 13
 698:	87 7f       	andi	r24, 0xF7	; 247
 69a:	8d b9       	out	0x0d, r24	; 13
 69c:	8d b1       	in	r24, 0x0d	; 13
 69e:	8b 7f       	andi	r24, 0xFB	; 251
 6a0:	8d b9       	out	0x0d, r24	; 13
 6a2:	8d b1       	in	r24, 0x0d	; 13
 6a4:	81 60       	ori	r24, 0x01	; 1
 6a6:	8d b9       	out	0x0d, r24	; 13
 6a8:	8e b1       	in	r24, 0x0e	; 14
 6aa:	8e 7f       	andi	r24, 0xFE	; 254
 6ac:	8e b9       	out	0x0e, r24	; 14
 6ae:	8d b1       	in	r24, 0x0d	; 13
 6b0:	80 64       	ori	r24, 0x40	; 64
 6b2:	8d b9       	out	0x0d, r24	; 13
 6b4:	08 95       	ret

000006b6 <SPI_receive>:
	//while(BIT_IS_CLEAR(SPSR,SPIF));
}

void SPI_receive(uint8* value)
{
	while(BIT_IS_CLEAR(SPSR,SPIF));
 6b6:	77 9b       	sbis	0x0e, 7	; 14
 6b8:	fe cf       	rjmp	.-4      	; 0x6b6 <SPI_receive>
	*value = SPDR;
 6ba:	2f b1       	in	r18, 0x0f	; 15
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18
 6c0:	08 95       	ret

000006c2 <itoa>:
 6c2:	45 32       	cpi	r20, 0x25	; 37
 6c4:	51 05       	cpc	r21, r1
 6c6:	20 f4       	brcc	.+8      	; 0x6d0 <itoa+0xe>
 6c8:	42 30       	cpi	r20, 0x02	; 2
 6ca:	10 f0       	brcs	.+4      	; 0x6d0 <itoa+0xe>
 6cc:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__itoa_ncheck>
 6d0:	fb 01       	movw	r30, r22
 6d2:	10 82       	st	Z, r1
 6d4:	cb 01       	movw	r24, r22
 6d6:	08 95       	ret

000006d8 <__itoa_ncheck>:
 6d8:	bb 27       	eor	r27, r27
 6da:	4a 30       	cpi	r20, 0x0A	; 10
 6dc:	31 f4       	brne	.+12     	; 0x6ea <__itoa_ncheck+0x12>
 6de:	99 23       	and	r25, r25
 6e0:	22 f4       	brpl	.+8      	; 0x6ea <__itoa_ncheck+0x12>
 6e2:	bd e2       	ldi	r27, 0x2D	; 45
 6e4:	90 95       	com	r25
 6e6:	81 95       	neg	r24
 6e8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ea:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__utoa_common>

000006ee <__utoa_ncheck>:
 6ee:	bb 27       	eor	r27, r27

000006f0 <__utoa_common>:
 6f0:	fb 01       	movw	r30, r22
 6f2:	55 27       	eor	r21, r21
 6f4:	aa 27       	eor	r26, r26
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	aa 1f       	adc	r26, r26
 6fc:	a4 17       	cp	r26, r20
 6fe:	10 f0       	brcs	.+4      	; 0x704 <__utoa_common+0x14>
 700:	a4 1b       	sub	r26, r20
 702:	83 95       	inc	r24
 704:	50 51       	subi	r21, 0x10	; 16
 706:	b9 f7       	brne	.-18     	; 0x6f6 <__utoa_common+0x6>
 708:	a0 5d       	subi	r26, 0xD0	; 208
 70a:	aa 33       	cpi	r26, 0x3A	; 58
 70c:	08 f0       	brcs	.+2      	; 0x710 <__utoa_common+0x20>
 70e:	a9 5d       	subi	r26, 0xD9	; 217
 710:	a1 93       	st	Z+, r26
 712:	00 97       	sbiw	r24, 0x00	; 0
 714:	79 f7       	brne	.-34     	; 0x6f4 <__utoa_common+0x4>
 716:	b1 11       	cpse	r27, r1
 718:	b1 93       	st	Z+, r27
 71a:	11 92       	st	Z+, r1
 71c:	cb 01       	movw	r24, r22
 71e:	0c 94 91 03 	jmp	0x722	; 0x722 <strrev>

00000722 <strrev>:
 722:	dc 01       	movw	r26, r24
 724:	fc 01       	movw	r30, r24
 726:	67 2f       	mov	r22, r23
 728:	71 91       	ld	r23, Z+
 72a:	77 23       	and	r23, r23
 72c:	e1 f7       	brne	.-8      	; 0x726 <strrev+0x4>
 72e:	32 97       	sbiw	r30, 0x02	; 2
 730:	04 c0       	rjmp	.+8      	; 0x73a <strrev+0x18>
 732:	7c 91       	ld	r23, X
 734:	6d 93       	st	X+, r22
 736:	70 83       	st	Z, r23
 738:	62 91       	ld	r22, -Z
 73a:	ae 17       	cp	r26, r30
 73c:	bf 07       	cpc	r27, r31
 73e:	c8 f3       	brcs	.-14     	; 0x732 <strrev+0x10>
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
